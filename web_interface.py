from flask import Flask, render_template, jsonify
import asyncio
import threading
from services.db_service import DBService
from datetime import datetime
import pytz

app = Flask(__name__)

# –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
KALININGRAD_TZ = pytz.timezone('Europe/Kaliningrad')

def format_kaliningrad_time(dt_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
    try:
        dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
        kld_time = dt.astimezone(KALININGRAD_TZ)
        return kld_time.strftime('%d.%m %H:%M')
    except:
        return dt_str

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/stats')
def api_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è Flask
        import aiosqlite
        import sqlite3

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('military_tracker.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            SELECT id, full_name, is_admin FROM users 
            ORDER BY full_name
        """)
        users = cursor.fetchall()

        soldiers = [(u[0], u[1]) for u in users if not u[2]]  # –Ω–µ –∞–¥–º–∏–Ω—ã
        admins_count = len([u for u in users if u[2]])  # –∞–¥–º–∏–Ω—ã

        present_list = []
        absent_list = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –±–æ–π—Ü–∞
        for user_id, full_name in soldiers:
            cursor.execute("""
                SELECT action, location, timestamp FROM user_records 
                WHERE user_id = ? 
                ORDER BY timestamp DESC 
                LIMIT 1
            """, (user_id,))

            record = cursor.fetchone()

            if record:
                action, location, timestamp = record
                time_str = format_kaliningrad_time(timestamp)

                person_data = {
                    'name': full_name,
                    'location': location,
                    'time': time_str
                }

                if action == '–ø—Ä–∏–±—ã–ª':
                    present_list.append(person_data)
                else:
                    absent_list.append(person_data)
            else:
                # –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π - —Å—á–∏—Ç–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º
                absent_list.append({
                    'name': full_name,
                    'location': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                    'time': '‚Äî'
                })

        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        stats = {
            'present': len(present_list),
            'absent': len(absent_list),
            'total': len(soldiers),
            'admins': admins_count,
            'present_list': present_list,
            'absent_list': absent_list,
            'present_count': len(present_list),
            'absent_count': len(absent_list),
            'total_soldiers': len(soldiers),
            'today_records': len(present_list) + len(absent_list),  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            'last_updated': datetime.now(KALININGRAD_TZ).strftime('%H:%M:%S')
        }

        return jsonify(stats)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ API: {e}")
        return jsonify({
            'present': 0,
            'absent': 0,
            'total': 0,
            'admins': 0,
            'present_list': [],
            'absent_list': [],
            'error': str(e)
        })

def run_flask():
    app.run(host='0.0.0.0', port=5000, debug=False)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:5000")
    print("üìä API –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://0.0.0.0:5000/api/stats")

    # –î–µ—Ä–∂–∏–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            threading.Event().wait(1)
    except KeyboardInterrupt:
        print("\nüõë –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")