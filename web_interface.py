
from flask import Flask, render_template_string, jsonify
from services.db_service import DatabaseService
from datetime import datetime
import threading
import asyncio
import os

app = Flask(__name__)
db = DatabaseService()

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéñÔ∏è –í–æ–µ–Ω–Ω—ã–π –¢–∞–±–µ–ª—å - –ü–∞–Ω–µ–ª—å –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 30px;
            backdrop-filter: blur(10px);
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
        }
        .stat-number {
            font-size: 3em;
            font-weight: bold;
            margin: 10px 0;
        }
        .stat-label {
            font-size: 1.2em;
            opacity: 0.9;
        }
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .online { background-color: #4CAF50; }
        .offline { background-color: #f44336; }
        .refresh-btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px;
        }
        .refresh-btn:hover {
            background: #45a049;
        }
        .last-update {
            text-align: center;
            opacity: 0.8;
            margin-top: 20px;
        }
        .recent-activity {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }
        .activity-item {
            padding: 10px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .activity-item:last-child {
            border-bottom: none;
        }
    </style>
    <script>
        function refreshData() {
            location.reload();
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(refreshData, 30000);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        async function checkBotStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                const indicator = document.getElementById('bot-status');
                if (data.status === 'online') {
                    indicator.className = 'status-indicator online';
                } else {
                    indicator.className = 'status-indicator offline';
                }
            } catch (error) {
                document.getElementById('bot-status').className = 'status-indicator offline';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.onload = checkBotStatus;
    </script>
</head>
<body>
    <div class="container">
        <h1>üéñÔ∏è –í–æ–µ–Ω–Ω—ã–π –¢–∞–±–µ–ª—å - –ü–∞–Ω–µ–ª—å –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h1>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-label">
                    <span id="bot-status" class="status-indicator online"></span>
                    –°—Ç–∞—Ç—É—Å –ë–æ—Ç–∞
                </div>
                <div class="stat-number">–û–ù–õ–ê–ô–ù</div>
                <div class="stat-label">{{ current_time }}</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-label">üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                <div class="stat-number">{{ stats.total_users }}</div>
                <div class="stat-label">–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-label">‚úÖ –í —á–∞—Å—Ç–∏</div>
                <div class="stat-number">{{ stats.present }}</div>
                <div class="stat-label">–±–æ–π—Ü–æ–≤</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-label">‚ùå –í–Ω–µ —á–∞—Å—Ç–∏</div>
                <div class="stat-number">{{ stats.absent }}</div>
                <div class="stat-label">–±–æ–π—Ü–æ–≤</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-label">üìä –ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è</div>
                <div class="stat-number">{{ stats.today_records }}</div>
                <div class="stat-label">–æ—Ç–º–µ—Ç–æ–∫</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-label">üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</div>
                <div class="stat-number">{{ stats.admins_count }}</div>
                <div class="stat-label">–∞–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
        </div>
        
        <div class="recent-activity">
            <h3>üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
            {% for activity in recent_activities %}
            <div class="activity-item">
                <div>
                    <strong>{{ activity.name }}</strong> 
                    {% if activity.action == '—É–±—ã–ª' %}
                        <span style="color: #ff6b6b;">‚ùå —É–±—ã–ª</span>
                    {% else %}
                        <span style="color: #51cf66;">‚úÖ –ø—Ä–∏–±—ã–ª</span>
                    {% endif %}
                    - {{ activity.location }}
                </div>
                <div style="opacity: 0.8;">{{ activity.time }}</div>
            </div>
            {% endfor %}
        </div>
        
        <div style="text-align: center; margin-top: 30px;">
            <button class="refresh-btn" onclick="refreshData()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
        </div>
        
        <div class="last-update">
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {{ current_time }}
        </div>
    </div>
</body>
</html>
"""

@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        current_status = db.get_current_status()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(db.get_all_users())
        admins_count = len(db.get_all_admins())
        today_records = len(db.get_records_by_date(datetime.now().strftime('%Y-%m-%d')))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        recent_records = db.get_all_records(limit=10)
        recent_activities = []
        
        for record in recent_records:
            user = db.get_user(record['user_id'])
            if user:
                timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                recent_activities.append({
                    'name': user['full_name'],
                    'action': record['action'],
                    'location': record['location'],
                    'time': timestamp.strftime('%d.%m %H:%M')
                })
        
        stats = {
            'total_users': total_users,
            'present': current_status['present'],
            'absent': current_status['absent'],
            'today_records': today_records,
            'admins_count': admins_count
        }
        
        return render_template_string(
            HTML_TEMPLATE,
            stats=stats,
            recent_activities=recent_activities,
            current_time=datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        )
        
    except Exception as e:
        return f"<h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}</h1>"

@app.route('/api/status')
def api_status():
    """API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ë–î –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        if os.path.exists('military_tracker.db'):
            return jsonify({'status': 'online', 'timestamp': datetime.now().isoformat()})
        else:
            return jsonify({'status': 'offline', 'timestamp': datetime.now().isoformat()})
    except Exception:
        return jsonify({'status': 'offline', 'timestamp': datetime.now().isoformat()})

@app.route('/api/stats')
def api_stats():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        current_status = db.get_current_status()
        total_users = len(db.get_all_users())
        
        return jsonify({
            'total_users': total_users,
            'present': current_status['present'],
            'absent': current_status['absent'],
            'absent_list': current_status['absent_list']
        })
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    print("üìä –ü–∞–Ω–µ–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:5000")
    app.run(host='0.0.0.0', port=5000, debug=False)
