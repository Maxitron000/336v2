
from flask import Flask, render_template_string, jsonify, request
from services.db_service import DatabaseService
from monitoring import monitor, get_system_status
import json
from datetime import datetime
import os

app = Flask(__name__)
db = DatabaseService()

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í–æ–µ–Ω–Ω—ã–π –¢–∞–±–µ–ª—å - –í–µ–± –ü–∞–Ω–µ–ª—å</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .header h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .header p {
            color: #7f8c8d;
            font-size: 1.2em;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-icon {
            font-size: 2.5em;
            margin-bottom: 15px;
        }
        
        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #7f8c8d;
            font-size: 1em;
        }
        
        .chart-container {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-healthy { background-color: #27ae60; }
        .status-warning { background-color: #f39c12; }
        .status-critical { background-color: #e74c3c; }
        
        .refresh-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s ease;
            margin: 10px;
        }
        
        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .footer {
            text-align: center;
            margin-top: 40px;
            color: #7f8c8d;
        }
        
        .api-section {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            margin-top: 30px;
        }
        
        .api-endpoint {
            background: #f8f9fa;
            padding: 10px 15px;
            border-radius: 8px;
            margin: 10px 0;
            font-family: monospace;
            border-left: 4px solid #667eea;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 20px;
                margin: 10px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéñÔ∏è –í–æ–µ–Ω–Ω—ã–π –¢–∞–±–µ–ª—å</h1>
            <p>–°–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —É—á–µ—Ç–∞ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö</p>
            <button class="refresh-btn" onclick="refreshData()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
        </div>
        
        <div class="stats-grid" id="statsGrid">
            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ JavaScript -->
        </div>
        
        <div class="chart-container">
            <h3>üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h3>
            <div id="systemStatus">
                <!-- –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ JavaScript -->
            </div>
        </div>
        
        <div class="api-section">
            <h3>üîó API Endpoints</h3>
            <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</p>
            <div class="api-endpoint">GET /api/status - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
            <div class="api-endpoint">GET /api/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            <div class="api-endpoint">GET /api/records - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏</div>
            <div class="api-endpoint">GET /api/health - –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</div>
            <div class="api-endpoint">GET /api/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</div>
        </div>
        
        <div class="footer">
            <p>¬© 2025 –í–æ–µ–Ω–Ω—ã–π –¢–∞–±–µ–ª—å. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç {{ uptime }}</p>
            <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <span id="lastUpdate">{{ last_update }}</span></p>
        </div>
    </div>

    <script>
        async function loadStats() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                
                const statsGrid = document.getElementById('statsGrid');
                statsGrid.innerHTML = `
                    <div class="stat-card">
                        <div class="stat-icon">üë•</div>
                        <div class="stat-value">${data.total_users}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">‚úÖ</div>
                        <div class="stat-value">${data.present_count}</div>
                        <div class="stat-label">–í —á–∞—Å—Ç–∏</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">‚ùå</div>
                        <div class="stat-value">${data.absent_count}</div>
                        <div class="stat-label">–í–Ω–µ —á–∞—Å—Ç–∏</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">üìã</div>
                        <div class="stat-value">${data.records_today}</div>
                        <div class="stat-label">–ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è</div>
                    </div>
                `;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            }
        }
        
        async function loadSystemStatus() {
            try {
                const response = await fetch('/api/health');
                const health = await response.json();
                
                const statusClass = `status-${health.status}`;
                const statusIcon = health.status === 'healthy' ? 'üü¢' : 
                                 health.status === 'warning' ? 'üü°' : 'üî¥';
                
                const systemStatus = document.getElementById('systemStatus');
                systemStatus.innerHTML = `
                    <p><span class="status-indicator ${statusClass}"></span>
                    ${statusIcon} –°—Ç–∞—Ç—É—Å: <strong>${health.status.toUpperCase()}</strong></p>
                    <p>‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${health.metrics.uptime}</p>
                    <p>üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${health.metrics.memory_usage.toFixed(1)}%</p>
                    <p>üñ•Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞ CPU: ${health.metrics.cpu_usage.toFixed(1)}%</p>
                    <p>üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${health.metrics.database_size} MB</p>
                    <p>üì° –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${health.metrics.successful_requests}</p>
                    ${health.issues.length > 0 ? 
                        `<p>‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: ${health.issues.join(', ')}</p>` : 
                        '<p>‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</p>'
                    }
                `;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
            }
        }
        
        function refreshData() {
            loadStats();
            loadSystemStatus();
            document.getElementById('lastUpdate').textContent = new Date().toLocaleString('ru-RU');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            refreshData();
            
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setInterval(refreshData, 30000);
        });
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    uptime = monitor.get_uptime()
    last_update = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
    return render_template_string(HTML_TEMPLATE, uptime=uptime, last_update=last_update)

@app.route('/api/status')
def api_status():
    """API: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        status = db.get_current_status()
        records_today = len(db.get_records_today())
        
        return jsonify({
            'total_users': status['total'],
            'present_count': status['present'],
            'absent_count': status['absent'],
            'records_today': records_today,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/users')
def api_users():
    """API: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        users = db.get_all_users()
        return jsonify({
            'users': users,
            'total': len(users),
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/records')
def api_records():
    """API: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    try:
        days = request.args.get('days', 7, type=int)
        limit = request.args.get('limit', 50, type=int)
        
        records = db.get_all_records(days=days, limit=limit)
        return jsonify({
            'records': records,
            'count': len(records),
            'period_days': days,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/health')
def api_health():
    """API: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        health = monitor.get_health_status()
        return jsonify(health)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/export')
def api_export():
    """API: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    try:
        format_type = request.args.get('format', 'json')
        days = request.args.get('days', 30, type=int)
        
        if format_type == 'excel':
            filename = db.export_to_excel(days=days)
            if filename:
                return jsonify({
                    'status': 'success',
                    'filename': filename,
                    'message': 'Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω'
                })
            else:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª'}), 500
                
        else:  # JSON –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            records = db.get_all_records(days=days)
            return jsonify({
                'records': records,
                'export_date': datetime.now().isoformat(),
                'period_days': days,
                'total_records': len(records)
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/ping')
def api_ping():
    """API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    return jsonify({
        'status': 'ok',
        'timestamp': datetime.now().isoformat(),
        'uptime': monitor.get_uptime()
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
