from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from services.db_service import DatabaseService
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time
import logging
import json
import random
import os
import asyncio

router = Router()
db = DatabaseService()
scheduler = AsyncIOScheduler()

# –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
CREATIVE_TEXTS = {
    'morning': [
        "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∑–∞—â–∏—Ç–Ω–∏–∫–∏! –í—Ä–µ–º—è –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –≤ —Ç–∞–±–µ–ª–µ!",
        "‚òÄÔ∏è –ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –ø–æ–¥–≤–∏–≥–∏! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Ç–∞–±–µ–ª—å!",
        "üéñÔ∏è –í–æ–µ–Ω–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–∞–±–µ–ª—è. –û—Ç–º–µ—Ç—å—Ç–µ—Å—å!",
        "üöÄ –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É –¥–Ω—é —Å–ª—É–∂–±—ã? –û—Ç–º–µ—Ç–∫–∞ –≤ —Ç–∞–±–µ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!",
        "‚≠ê –ó–≤–µ–∑–¥—ã –ø–æ–≥–∞—Å–ª–∏, –Ω–æ –≤–∞—à–∞ —Å–ª—É–∂–±–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –¢–∞–±–µ–ª—å –∂–¥–µ—Ç!"
    ],
    'evening': [
        "üåô –î–µ–Ω—å —Å–ª—É–∂–±—ã –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–µ–ª–µ!",
        "üåÜ –í—Ä–µ–º—è –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏ –¥–Ω—è. –¢–∞–±–µ–ª—å –≤ –ø–æ—Ä—è–¥–∫–µ?",
        "üéØ –ú–∏—Å—Å–∏—è –¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞? –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–µ–ª—å —Ç–æ–∂–µ!",
        "üè† –ö–æ–Ω–µ—Ü –¥–Ω—è - –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏ –≤ —Ç–∞–±–µ–ª–µ!",
        "üìã –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ 24/7! –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
    ],
    'reminder': [
        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç–∞–±–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!",
        "üîî –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å—Å—è –ø—Ä–∏ —É–±—ã—Ç–∏–∏ –∏ –ø—Ä–∏–±—ã—Ç–∏–∏!",
        "üì± –ë—ã—Å—Ç—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–µ–ª–µ!",
        "üéñÔ∏è –í–æ–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç –∏ —Ç–∞–±–µ–ª—å!",
        "‚ö° –°–µ–∫—É–Ω–¥–Ω–æ–µ –¥–µ–ª–æ - –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –≤ —Ç–∞–±–µ–ª–µ!"
    ],
    'weekly': [
        "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
        "üìà –ù–µ–¥–µ–ª—è —Å–ª—É–∂–±—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!",
        "üèÜ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: –∫—Ç–æ –±—ã–ª —Å–∞–º—ã–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º?",
        "üìã –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!",
        "üéØ –ù–µ–¥–µ–ª—è –∑–∞ –Ω–µ–¥–µ–ª–µ–π - —Å—Ç—Ä–æ–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –≤–º–µ—Å—Ç–µ!"
    ]
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    'morning_reminder': True,
    'evening_reminder': True,
    'weekly_report': True,
    'activity_notifications': True,
    'quiet_mode': False,
    'quiet_start': '22:00',
    'quiet_end': '06:00',
    'morning_time': '08:00',
    'evening_time': '18:00',
    'weekly_day': 'monday',
    'weekly_time': '10:00'
}

def load_notification_settings():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        if os.path.exists('notifications.json'):
            with open('notifications.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            return DEFAULT_SETTINGS
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return DEFAULT_SETTINGS

def save_notification_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        with open('notifications.json', 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

def get_random_text(category):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    texts = CREATIVE_TEXTS.get(category, CREATIVE_TEXTS['reminder'])
    return random.choice(texts)

def is_quiet_time():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ç–∏—Ö–∏–º —á–∞—Å–æ–º"""
    settings = load_notification_settings()

    if not settings.get('quiet_mode', False):
        return False

    try:
        now = datetime.now().time()
        quiet_start = datetime.strptime(settings['quiet_start'], '%H:%M').time()
        quiet_end = datetime.strptime(settings['quiet_end'], '%H:%M').time()

        if quiet_start <= quiet_end:
            return quiet_start <= now <= quiet_end
        else:  # –ß–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
            return now >= quiet_start or now <= quiet_end
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—Ö–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False

async def send_notification_to_admins(bot: Bot, message: str, parse_mode: str = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
    try:
        admins = db.get_all_admins()
        sent_count = 0

        for admin in admins:
            try:
                await bot.send_message(
                    admin['id'], 
                    message, 
                    parse_mode=parse_mode
                )
                sent_count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin['id']}: {e}")

        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return sent_count

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º: {e}")
        return 0

async def send_morning_reminder(bot: Bot):
    """–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    if is_quiet_time():
        return

    try:
        text = get_random_text('morning')
        await send_notification_to_admins(bot, text)
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def send_evening_reminder(bot: Bot):
    """–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    if is_quiet_time():
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
        records_today = db.get_records_today()
        status = db.get_current_status()

        text = get_random_text('evening')
        text += f"\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è:**\n"
        text += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è: {len(records_today)}\n"
        text += f"‚Ä¢ –í —á–∞—Å—Ç–∏: {status['present']}\n"
        text += f"‚Ä¢ –í–Ω–µ —á–∞—Å—Ç–∏: {status['absent']}"

        await send_notification_to_admins(bot, text, parse_mode="Markdown")
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def send_weekly_report(bot: Bot):
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    if is_quiet_time():
        return

    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        records_week = db.get_all_records(days=7)
        users = db.get_all_users()

        # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_activity = {}
        for record in records_week:
            name = record['full_name']
            user_activity[name] = user_activity.get(name, 0) + 1

        top_users = sorted(user_activity.items(), key=lambda x: x[1], reverse=True)[:5]

        text = get_random_text('weekly')
        text += f"\n\nüìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(records_week)}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_activity)}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(users)}\n\n"

        if top_users:
            text += f"üèÜ **–¢–û–ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n"
            for i, (name, count) in enumerate(top_users, 1):
                text += f"{i}. {name}: {count} –∑–∞–ø–∏—Å–µ–π\n"

        # –°–æ–∑–¥–∞–µ–º Excel –æ—Ç—á–µ—Ç
        filename = db.export_to_excel(days=7)

        await send_notification_to_admins(bot, text, parse_mode="Markdown")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
        if filename:
            try:
                from config import MAIN_ADMIN_ID
                from aiogram.types import FSInputFile

                document = FSInputFile(filename)
                await bot.send_document(
                    MAIN_ADMIN_ID,
                    document,
                    caption="üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel"
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(filename)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel —Ñ–∞–π–ª–∞: {e}")

        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

async def cleanup_old_records():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        deleted_count = db.cleanup_old_records(days=180)  # 6 –º–µ—Å—è—Ü–µ–≤

        if deleted_count > 0:
            message = f"üßπ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞**\n\n"
            message += f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {deleted_count}\n"
            message += f"–ó–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 180 –¥–Ω–µ–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."

            from config import MAIN_ADMIN_ID
            try:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
                bot = Bot.get_current()
                await bot.send_message(MAIN_ADMIN_ID, message, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—á–∏—Å—Ç–∫–µ: {e}")

        logging.info(f"–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π: {e}")

def setup_scheduler(bot: Bot = None):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        settings = load_notification_settings()

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
        scheduler.remove_all_jobs()

        if settings.get('morning_reminder', True):
            morning_time = settings.get('morning_time', '08:00').split(':')
            scheduler.add_job(
                lambda: asyncio.create_task(send_morning_reminder(bot)) if bot else None,
                'cron',
                hour=int(morning_time[0]),
                minute=int(morning_time[1]),
                id='morning_reminder'
            )
            logging.info(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ {settings.get('morning_time', '08:00')}")

        if settings.get('evening_reminder', True):
            evening_time = settings.get('evening_time', '20:00').split(':')
            scheduler.add_job(
                lambda: asyncio.create_task(send_evening_reminder(bot)) if bot else None,
                'cron',
                hour=int(evening_time[0]),
                minute=int(evening_time[1]),
                id='evening_reminder'
            )
            logging.info(f"‚úÖ –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ {settings.get('evening_time', '20:00')}")

        if settings.get('weekly_reports', True):
            weekly_day = settings.get('weekly_day', 0)  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            weekly_hour = settings.get('weekly_hour', 9)
            scheduler.add_job(
                lambda: asyncio.create_task(send_weekly_report(bot)) if bot else None,
                'cron',
                day_of_week=weekly_day,
                hour=weekly_hour,
                id='weekly_report'
            )
            logging.info(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –¥–µ–Ω—å {weekly_day}, —á–∞—Å {weekly_hour}")

        if not scheduler.running:
            scheduler.start()
            logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        import traceback
        logging.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        try:
            scheduler.remove_all_jobs()

            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            scheduler.add_job(
                lambda: asyncio.create_task(send_morning_reminder(bot)) if bot else None,
                'cron',
                hour=8,
                minute=0,
                id='morning_reminder'
            )

            scheduler.add_job(
                lambda: asyncio.create_task(send_evening_reminder(bot)) if bot else None,
                'cron',
                hour=20,
                minute=0,
                id='evening_reminder'
            )

            if not scheduler.running:
                scheduler.start()

            logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        except Exception as e2:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e2}")

@router.callback_query(lambda c: c.data and c.data.startswith('notification_'))
async def handle_notification_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        action = callback.data.replace('notification_', '')
        settings = load_notification_settings()

        if action == 'toggle_morning':
            settings['morning_reminder'] = not settings.get('morning_reminder', True)
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['morning_reminder'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await callback.answer(f"–£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")

        elif action == 'toggle_evening':
            settings['evening_reminder'] = not settings.get('evening_reminder', True)
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['evening_reminder'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await callback.answer(f"–í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")

        elif action == 'toggle_weekly':
            settings['weekly_report'] = not settings.get('weekly_report', True)
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['weekly_report'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await callback.answer(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã {status}")

        elif action == 'toggle_quiet':
            settings['quiet_mode'] = not settings.get('quiet_mode', False)
            status = "–≤–∫–ª—é—á–µ–Ω" if settings['quiet_mode'] else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await callback.answer(f"–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã {status}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        save_notification_settings(settings)

        # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        bot = callback.bot
        setup_scheduler(bot)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")