from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.db_service import DatabaseService
from config import MAIN_ADMIN_ID
import logging
from datetime import datetime, timedelta

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
try:
    import pandas as pd
    import openpyxl
    EXPORT_AVAILABLE = True
    logging.info("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    EXPORT_AVAILABLE = False
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    logging.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install pandas openpyxl")

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    waiting_for_admin_id = State()
    waiting_for_search_query = State()
    waiting_for_filter_period = State()
    waiting_for_bulk_action = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseService()

def get_admin_panel_keyboard(is_main_admin: bool = False):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìä –°–≤–æ–¥–∫–∞", callback_data="admin_summary"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="admin_search")
        ],
        [
            InlineKeyboardButton(text="üìã –ñ—É—Ä–Ω–∞–ª", callback_data="admin_journal"),
            InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")
        ],
        [
            InlineKeyboardButton(text="üë• –ü–µ—Ä—Å–æ–Ω–∞–ª", callback_data="admin_personnel"),
            InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export_menu")
        ],
        [
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ]
    ]

    if is_main_admin:
        keyboard.append([InlineKeyboardButton(text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_manage")])

    keyboard.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_journal_filter_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∂—É—Ä–Ω–∞–ª–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ 1 –¥–µ–Ω—å", callback_data="filter_journal_1"),
            InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="filter_journal_7"),
            InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="filter_journal_30")
        ],
        [
            InlineKeyboardButton(text="üü¢ –¢–æ–ª—å–∫–æ –ø—Ä–∏–±—ã—Ç–∏—è", callback_data="filter_action_arrived"),
            InlineKeyboardButton(text="üî¥ –¢–æ–ª—å–∫–æ —É–±—ã—Ç–∏—è", callback_data="filter_action_departed")
        ],
        [
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="filter_reset"),
            InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="admin_journal_show")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

def get_personnel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", callback_data="personnel_all"),
            InlineKeyboardButton(text="‚úÖ –í —á–∞—Å—Ç–∏", callback_data="personnel_present")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="personnel_absent"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –±–æ–π—Ü–∞", callback_data="personnel_search")
        ],
        [
            InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏ –ø–æ –±–æ–π—Ü—É", callback_data="personnel_details"),
            InlineKeyboardButton(text="üîß –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="personnel_bulk")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

def get_analytics_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics_general"),
            InlineKeyboardButton(text="üìç –ü–æ –ª–æ–∫–∞—Ü–∏—è–º", callback_data="analytics_locations")
        ],
        [
            InlineKeyboardButton(text="üë§ –ü–æ –±–æ–π—Ü–∞–º", callback_data="analytics_soldiers"),
            InlineKeyboardButton(text="üìÖ –ü–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="analytics_time")
        ],
        [
            InlineKeyboardButton(text="üèÜ –¢–û–ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="analytics_top"),
            InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_charts")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

def get_back_keyboard(callback_data: str) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])

def get_export_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä Excel", callback_data="export_excel"),
            InlineKeyboardButton(text="üìÑ CSV", callback_data="export_csv")
        ],
        [
            InlineKeyboardButton(text="üìë PDF", callback_data="export_pdf"),
            InlineKeyboardButton(text="üìà –û—Ç—á–µ—Ç—ã", callback_data="export_reports")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user_id == MAIN_ADMIN_ID:
        return True
    return db.is_admin(user_id)

@router.callback_query(F.data == "admin_panel")
async def callback_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    is_main_admin = user_id == MAIN_ADMIN_ID
    await callback.message.edit_text(
        "‚öôÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –∏ –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_panel_keyboard(is_main_admin),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_search")
async def callback_admin_search(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_search_query)
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n"
        "‚Ä¢ –ò–º—è –±–æ–π—Ü–∞\n"
        "‚Ä¢ –õ–æ–∫–∞—Ü–∏—è\n"
        "‚Ä¢ –ß–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏\n\n"
        "üí° –ü–æ–∏—Å–∫ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É",
        reply_markup=get_back_keyboard("admin_panel"),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_search_query)
async def handle_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = message.text.strip()
    await state.clear()

    try:
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.get_all_users()
        found_users = [u for u in users if query.lower() in u['full_name'].lower()]

        # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π
        records = db.get_all_records(days=30)
        found_records = [r for r in records if 
                        query.lower() in r['full_name'].lower() or 
                        query.lower() in r['location'].lower()]

        text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'**\n\n"

        if found_users:
            text += f"üë• **–ù–∞–π–¥–µ–Ω–æ –±–æ–π—Ü–æ–≤: {len(found_users)}**\n"
            for user in found_users[:5]:
                text += f"‚Ä¢ {user['full_name']}\n"
            if len(found_users) > 5:
                text += f"... –∏ –µ—â–µ {len(found_users) - 5}\n"
            text += "\n"

        if found_records:
            text += f"üìã **–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(found_records)}**\n"
            for record in found_records[:5]:
                timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                formatted_time = timestamp.strftime('%d.%m %H:%M')
                action_emoji = "üî¥" if record['action'] == "–Ω–µ –≤ —á–∞—Å—Ç–∏" else "üü¢"
                text += f"{action_emoji} {record['full_name']} - {record['location']} ({formatted_time})\n"
            if len(found_records) > 5:
                text += f"... –∏ –µ—â–µ {len(found_records) - 5}\n"

        if not found_users and not found_records:
            text += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"

        keyboard = [
            [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin_search")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]

        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞")

@router.callback_query(F.data == "admin_journal")
async def callback_admin_journal(callback: CallbackQuery):
    """–ñ—É—Ä–Ω–∞–ª —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üìã **–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:\n"
        "üìÖ –ü–æ –≤—Ä–µ–º–µ–Ω–∏\n"
        "üéØ –ü–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è\n"
        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
        reply_markup=get_journal_filter_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("filter_"))
async def callback_filter_journal(callback: CallbackQuery):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∫ –∂—É—Ä–Ω–∞–ª—É"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    filter_type = callback.data.split("_")[-1]

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            "üîÑ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞...**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode="Markdown"
        )

        if filter_type in ["1", "7", "30"]:
            days = int(filter_type)
            records = db.get_all_records(days=days, limit=50)
            period_text = f"{days} –¥–Ω."
        elif filter_type == "arrived":
            records = db.get_all_records(days=7, limit=50)
            records = [r for r in records if r['action'] == '–≤ —á–∞—Å—Ç–∏']
            period_text = "–ø—Ä–∏–±—ã—Ç–∏—è (7 –¥–Ω.)"
        elif filter_type == "departed":
            records = db.get_all_records(days=7, limit=50)
            records = [r for r in records if r['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏']
            period_text = "—É–±—ã—Ç–∏—è (7 –¥–Ω.)"
        elif filter_type == "reset":
            records = db.get_all_records(days=7, limit=50)
            period_text = "–≤—Å–µ (7 –¥–Ω.)"
        else:
            records = db.get_all_records(days=7, limit=50)
            period_text = "–≤—Å–µ (7 –¥–Ω.)"

        if not records:
            text = f"üìã **–ñ—É—Ä–Ω–∞–ª ({period_text})**\n\nüìù –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        else:
            text = f"üìã **–ñ—É—Ä–Ω–∞–ª ({period_text})**\n"
            text += f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}\n"
            text += "‚îÄ" * 30 + "\n\n"

            for i, record in enumerate(records[:15], 1):
                try:
                    timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                    formatted_date = timestamp.strftime('%d.%m')
                    formatted_time = timestamp.strftime('%H:%M')

                    if record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
                        action_emoji = "üî¥"
                        status_color = "üö∂"
                    else:
                        action_emoji = "üü¢"
                        status_color = "üè†"

                    text += f"{action_emoji} **{record['full_name']}**\n"
                    text += f"{status_color} {record['action']} - {record['location']}\n"
                    text += f"üìÖ {formatted_date} –≤ {formatted_time}\n\n"
                except Exception as record_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {record_error}")
                    continue

            if len(records) > 15:
                text += f"... –∏ –µ—â–µ {len(records) - 15} –∑–∞–ø–∏—Å–µ–π"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        export_callback = "admin_export_menu"
        if filter_type == "7":
            export_callback = "export_weekly"
        elif filter_type == "30":
            export_callback = "export_monthly"

        keyboard = [
            [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä", callback_data="admin_journal")],
            [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data=export_callback)],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        await callback.answer("‚úÖ –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_back_keyboard("admin_journal"),
            parse_mode="Markdown"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞", show_alert=True)

@router.callback_query(F.data == "admin_personnel")
async def callback_admin_personnel(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–æ–≤\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ–π—Ü–∞\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
        reply_markup=get_personnel_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("personnel_"))
async def callback_personnel_action(callback: CallbackQuery):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    action = callback.data.split("_")[-1]

    try:
        if action == "all":
            users = db.get_all_users()
            text = f"üë• **–í—Å–µ –±–æ–π—Ü—ã ({len(users)})**\n\n"
            for i, user in enumerate(users[:20], 1):
                text += f"{i}. {user['full_name']}\n"
            if len(users) > 20:
                text += f"... –∏ –µ—â–µ {len(users) - 20}"

        elif action == "present":
            status = db.get_current_status()
            present_users = status.get('present_users', [])
            text = f"‚úÖ **–í —á–∞—Å—Ç–∏ ({len(present_users)})**\n\n"
            for i, user in enumerate(present_users[:20], 1):
                text += f"{i}. {user['name']}\n"
            if len(present_users) > 20:
                text += f"... –∏ –µ—â–µ {len(present_users) - 20}"

        elif action == "absent":
            status = db.get_current_status()
            absent_users = status.get('absent_users', [])
            text = f"‚ùå **–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(absent_users)})**\n\n"
            for i, user in enumerate(absent_users[:20], 1):
                text += f"{i}. {user['name']} - {user['location']}\n"
            if len(absent_users) > 20:
                text += f"... –∏ –µ—â–µ {len(absent_users) - 20}"

        elif action == "search":
            await callback.message.edit_text(
                "üîç **–ü–æ–∏—Å–∫ –±–æ–π—Ü–∞**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                reply_markup=get_back_keyboard("admin_personnel"),
                parse_mode="Markdown"
            )
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            text = "üîç –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–∏–π –ø–æ–∏—Å–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."

        elif action == "details":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ–π—Ü–∞–º
            users = db.get_all_users()
            text = f"üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n"
            text += f"üë• –í—Å–µ–≥–æ –±–æ–π—Ü–æ–≤: {len(users)}\n\n"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            records = db.get_all_records(days=30, limit=1000)
            if records:
                user_activity = {}
                for record in records:
                    name = record['full_name']
                    user_activity[name] = user_activity.get(name, 0) + 1

                text += "üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 30 –¥–Ω–µ–π:**\n"
                sorted_activity = sorted(user_activity.items(), key=lambda x: x[1], reverse=True)
                for i, (name, count) in enumerate(sorted_activity[:10], 1):
                    text += f"{i}. {name}: {count} –∑–∞–ø–∏—Å–µ–π\n"
            else:
                text += "üìù –ó–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        elif action == "bulk":
            text = "üîß **–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è**\n\n"
            text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
            text += "‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞\n"
            text += "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            text += "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–æ–≤\n\n"
            text += "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

        else:
            text = "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_personnel"),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ personnel_action: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data == "admin_analytics")
async def callback_admin_analytics(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:\n"
        "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ–π—Ü–æ–≤\n"
        "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã",
        reply_markup=get_analytics_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("analytics_"))
async def callback_analytics_action(callback: CallbackQuery):
    """–î–µ–π—Å—Ç–≤–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    action = callback.data.split("_")[-1]

    try:
        if action == "general":
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            records = db.get_all_records(days=30)
            users = db.get_all_users()
            status = db.get_current_status()

            total_actions = len(records)
            departures = len([r for r in records if r['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏'])
            arrivals = len([r for r in records if r['action'] == '–≤ —á–∞—Å—Ç–∏'])

            text = "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π**\n\n"
            text += f"üë• –í—Å–µ–≥–æ –±–æ–π—Ü–æ–≤: {len(users)}\n"
            text += f"‚úÖ –í —á–∞—Å—Ç–∏: {status.get('present', 0)}\n"
            text += f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {status.get('absent', 0)}\n\n"
            text += f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_actions}\n"
            text += f"‚Ä¢ –£–±—ã—Ç–∏–π: {departures}\n"
            text += f"‚Ä¢ –ü—Ä–∏–±—ã—Ç–∏–π: {arrivals}\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {total_actions // 30 if total_actions > 0 else 0}\n\n"
            text += f"üìä **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:**\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(total_actions / len(users) * 100):.1f}%\n" if users else "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 0%\n"
            text += f"‚Ä¢ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {(status.get('present', 0) / len(users) * 100):.1f}%\n" if users else "‚Ä¢ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: 0%\n"

        elif action == "locations":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
            records = db.get_all_records(days=30)
            locations = {}
            for record in records:
                if record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
                    loc = record['location']
                    locations[loc] = locations.get(loc, 0) + 1

            text = "üìç **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º (30 –¥–Ω–µ–π)**\n\n"
            if locations:
                sorted_locations = sorted(locations.items(), key=lambda x: x[1], reverse=True)
                text += "üèÜ **–¢–û–ü –ª–æ–∫–∞—Ü–∏–∏:**\n"
                for i, (location, count) in enumerate(sorted_locations[:10], 1):
                    percentage = (count / sum(locations.values()) * 100)
                    text += f"{i}. {location}: {count} ({percentage:.1f}%)\n"
            else:
                text += "üìù –î–∞–Ω–Ω—ã—Ö –ø–æ –ª–æ–∫–∞—Ü–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        elif action == "soldiers":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ–π—Ü–∞–º
            records = db.get_all_records(days=30)
            soldier_activity = {}
            for record in records:
                name = record['full_name']
                soldier_activity[name] = soldier_activity.get(name, 0) + 1

            text = "üë§ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ–π—Ü–æ–≤ (30 –¥–Ω–µ–π)**\n\n"
            if soldier_activity:
                sorted_soldiers = sorted(soldier_activity.items(), key=lambda x: x[1], reverse=True)
                text += "üèÜ **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:**\n"
                for i, (name, count) in enumerate(sorted_soldiers[:10], 1):
                    text += f"{i}. {name}: {count} –∑–∞–ø–∏—Å–µ–π\n"

                text += f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {sum(soldier_activity.values()) / len(soldier_activity):.1f}\n"
                text += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max(soldier_activity.values())}\n"
                text += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min(soldier_activity.values())}\n"
            else:
                text += "üìù –î–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        elif action == "time":
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            records = db.get_all_records(days=30)
            if records:
                from collections import defaultdict
                hourly_stats = defaultdict(int)
                daily_stats = defaultdict(int)

                for record in records:
                    timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                    hour = timestamp.hour
                    day = timestamp.strftime('%A')
                    hourly_stats[hour] += 1
                    daily_stats[day] += 1

                text = "üìÖ **–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ (30 –¥–Ω–µ–π)**\n\n"

                # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
                text += "üïí **–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n"
                sorted_hours = sorted(hourly_stats.items(), key=lambda x: x[1], reverse=True)
                for hour, count in sorted_hours[:5]:
                    text += f"‚Ä¢ {hour:02d}:00 - {count} –∑–∞–ø–∏—Å–µ–π\n"

                text += "\nüìÜ **–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**\n"
                day_names = {
                    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                    'Wednesday': '–°—Ä–µ–¥–∞',
                    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                    'Saturday': '–°—É–±–±–æ—Ç–∞',
                    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                }

                for day, count in daily_stats.items():
                    day_ru = day_names.get(day, day)
                    text += f"‚Ä¢ {day_ru}: {count} –∑–∞–ø–∏—Å–µ–π\n"
            else:
                text = "üìÖ **–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑**\n\nüìù –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

        elif action == "top":
            # –¢–û–ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            records = db.get_all_records(days=30)
            users = db.get_all_users()

            text = "üèÜ **–¢–û–ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü**\n\n"

            if records and users:
                # –¢–û–ü –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
                user_records = {}
                location_records = {}

                for record in records:
                    name = record['full_name']
                    location = record['location']
                    user_records[name] = user_records.get(name, 0) + 1
                    if record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
                        location_records[location] = location_records.get(location, 0) + 1

                # –¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                text += "üëë **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–π—Ü—ã:**\n"
                sorted_users = sorted(user_records.items(), key=lambda x: x[1], reverse=True)
                for i, (name, count) in enumerate(sorted_users[:5], 1):
                    text += f"{i}. {name} - {count} –∑–∞–ø–∏—Å–µ–π\n"

                # –¢–û–ü –ª–æ–∫–∞—Ü–∏–∏
                if location_records:
                    text += "\nüìç **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:**\n"
                    sorted_locations = sorted(location_records.items(), key=lambda x: x[1], reverse=True)
                    for i, (location, count) in enumerate(sorted_locations[:5], 1):
                        text += f"{i}. {location} - {count} —Ä–∞–∑\n"
            else:
                text += "üìù –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"

        elif action == "charts":
            text = "üìä **–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
            text += "üìà –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:\n"
            text += "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º\n"
            text += "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º\n"
            text += "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ª–æ–∫–∞—Ü–∏—è–º\n"
            text += "‚Ä¢ –¢—Ä–µ–Ω–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è\n\n"
            text += "‚öôÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç Excel –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"

        else:
            text = "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_analytics"),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ analytics_action: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)

@router.callback_query(F.data == "admin_export_menu")
async def callback_admin_export_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:\n"
        "‚Ä¢ Excel —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
        "‚Ä¢ CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "‚Ä¢ PDF –æ—Ç—á–µ—Ç—ã\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã",
        reply_markup=get_export_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("export_"))
async def callback_export_action(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
    if not EXPORT_AVAILABLE:
        await callback.message.edit_text(
            "‚ùå **–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=get_back_keyboard("admin_export_menu"),
            parse_mode="Markdown"
        )
        await callback.answer("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    export_type = callback.data.split("_")[-1]

    try:
        await callback.message.edit_text("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...", parse_mode="Markdown")

        if export_type == "excel":
            keyboard = [
                [
                    InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="export_excel_today"),
                    InlineKeyboardButton(text="üìÖ –í—á–µ—Ä–∞", callback_data="export_excel_yesterday")
                ],
                [
                    InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="export_excel_week"),
                    InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="export_excel_month")
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_export_menu")]
            ]

            await callback.message.edit_text(
                "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="Markdown"
                        )
            await callback.answer()
            return

        elif export_type == "csv":
            # CSV Export logic
            records = db.get_all_records(days=30, limit=10000)
            if records:
                filename = db.export_to_csv(days=30)
                period_text = "CSV —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ 30 –¥–Ω–µ–π"
            else:
                filename = None
                period_text = "CSV —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ 30 –¥–Ω–µ–π"

        elif export_type == "pdf":
            # PDF Export logic
            period_text = "PDF —ç–∫—Å–ø–æ—Ä—Ç"
            filename = None  # Placeholder
            await callback.answer("‚ùå PDF —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
            return

        elif export_type == "reports":
            # Reports logic
            period_text = "–û—Ç—á–µ—Ç—ã"
            filename = None  # Placeholder
            await callback.answer("‚ùå –û—Ç—á–µ—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
            return

        elif export_type in ["today", "yesterday", "week", "month"]:
            filename = None
            period_text = ""

            if export_type == "today":
                records = db.get_records_today()
                if records:
                    filename = db.export_records_to_excel(records, "—Å–µ–≥–æ–¥–Ω—è")
                    period_text = "—Å–µ–≥–æ–¥–Ω—è"
                else:
                    await callback.message.edit_text(
                        "‚ùå **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n"
                        "–ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                        reply_markup=get_back_keyboard("admin_export_menu"),
                        parse_mode="Markdown"
                    )
                    await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                    return

            elif export_type == "yesterday":
                records = db.get_records_yesterday()
                if records:
                    filename = db.export_records_to_excel(records, "–≤—á–µ—Ä–∞")
                    period_text = "–≤—á–µ—Ä–∞"
                else:
                    await callback.message.edit_text(
                        "‚ùå **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞**\n\n"
                        "–ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                        reply_markup=get_back_keyboard("admin_export_menu"),
                        parse_mode="Markdown"
                    )
                    await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                    return

            elif export_type == "week":
                records = db.get_all_records(days=7)
                if records:
                    filename = db.export_records_to_excel(records, "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
                    period_text = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
                else:
                    await callback.message.edit_text(
                        "‚ùå **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π**\n\n",
                        reply_markup=get_back_keyboard("admin_export_menu"),
                        parse_mode="Markdown"
                    )
                    await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                    return

            elif export_type == "month":
                records = db.get_all_records(days=30)
                if records:
                    filename = db.export_records_to_excel(records, "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
                    period_text = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
                else:
                    await callback.message.edit_text(
                        "‚ùå **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π**\n\n",
                        reply_markup=get_back_keyboard("admin_export_menu"),
                        parse_mode="Markdown"
                    )
                    await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                    return

        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            return

        if filename:
                    try:
                        from aiogram.types import FSInputFile
                        import os

                        if os.path.exists(filename):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                            file_size = os.path.getsize(filename)
                            if file_size > 50 * 1024 * 1024:  # 50MB –ª–∏–º–∏—Ç Telegram
                                await callback.message.edit_text(
                                    f"‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π**\n\n"
                                    f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f} –ú–ë\n"
                                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë\n\n"
                                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ–Ω—å—à–∏–π –ø–µ—Ä–∏–æ–¥.",
                                    reply_markup=get_back_keyboard("admin_export_menu"),
                                    parse_mode="Markdown"
                                )
                                try:
                                    os.remove(filename)
                                except:
                                    pass
                                return

                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                            document = FSInputFile(filename)
                            await callback.message.answer_document(
                                document,
                                caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç: {period_text}\nüìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024:.1f} –ö–ë"
                            )

                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            try:
                                os.remove(filename)
                            except Exception as cleanup_error:
                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await callback.message.edit_text(
                                f"‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**\n\nüì§ –î–∞–Ω–Ω—ã–µ ({period_text}) —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.",
                                reply_markup=get_back_keyboard("admin_export_menu"),
                                parse_mode="Markdown"
                            )
                            await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        else:
                            raise FileNotFoundError("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
                    except Exception as send_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {send_error}")
                        await callback.message.edit_text(
                            f"‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞**\n\n"
                            f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {str(send_error)}",
                            reply_markup=get_back_keyboard("admin_export_menu"),
                            parse_mode="Markdown"
                        )
                        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
                        return
                else:
            await callback.message.edit_text(
                f"‚ùå **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
                f"–ó–∞ –ø–µ—Ä–∏–æ–¥ ({period_text}) –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                reply_markup=get_back_keyboard("admin_export_menu"),
                parse_mode="Markdown"
            )
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.",
            reply_markup=get_back_keyboard("admin_export_menu"),
            parse_mode="Markdown"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)

@router.callback_query(F.data.startswith("export_excel_"))
async def callback_export_excel_period(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç Excel –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    period = callback.data.split("_")[-1]

    try:
        from datetime import datetime, timedelta
        from aiogram.types import BufferedInputFile

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        await callback.message.edit_text(
            "üîÑ **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode="Markdown"
        )

        if period == "today":
            # –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            records = db.get_records_today()
            period_text = f"–∑–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')})"
            filename_period = "today"

        elif period == "yesterday":
            # –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ –≤—á–µ—Ä–∞
            records = db.get_records_yesterday()
            yesterday = (datetime.now() - timedelta(days=1)).date()
            period_text = f"–∑–∞ –≤—á–µ—Ä–∞ ({yesterday.strftime('%d.%m.%Y')})"
            filename_period = "yesterday"

        elif period == "week":
            # –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
            records = db.get_all_records(days=7)
            period_text = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
            filename_period = "week"

        elif period == "month":
            # –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ –º–µ—Å—è—Ü
            records = db.get_all_records(days=30)
            period_text = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
            filename_period = "month"

        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if records:
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
                if period == "today":
                    start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
                    end_date = datetime.now().replace(hour=23, minute=59, second=59, microsecond=999999)
                elif period == "yesterday":
                    yesterday_date = datetime.now().date() - timedelta(days=1)
                    start_date = datetime.combine(yesterday_date, datetime.min.time())
                    end_date = datetime.combine(yesterday_date, datetime.max.time())
                elif period == "week":
                    end_date = datetime.now()
                    start_date = end_date - timedelta(days=7)
                elif period == "month":
                    end_date = datetime.now()
                    start_date = end_date - timedelta(days=30)

                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
                filename = db.export_records_to_excel(records, period_text)

                if filename:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    with open(filename, 'rb') as file:
                        await callback.message.answer_document(
                            document=BufferedInputFile(file.read(), filename=filename),
                            caption=f"üìä **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö {period_text}**\n\n"
                                   f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}\n"
                                   f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_text}",
                            parse_mode="Markdown"
                        )

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    import os
                    try:
                        os.remove(filename)
                    except:
                        pass

                    await callback.message.edit_text(
                        f"‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                        f"üìä –î–∞–Ω–Ω—ã–µ {period_text} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel.\n"
                        f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}",
                        reply_markup=get_back_keyboard("admin_export_menu"),
                        parse_mode="Markdown"
                    )
                    await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert=False)
                else:
                    await callback.message.edit_text(
                        f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                        reply_markup=get_back_keyboard("admin_export_menu"),
                        parse_mode="Markdown"
                    )
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞", show_alert=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
                await callback.message.edit_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                    reply_markup=get_back_keyboard("admin_export_menu"),
                    parse_mode="Markdown"
                )
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        else:
            await callback.message.edit_text(
                f"‚ùå **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
                f"–ó–∞ –ø–µ—Ä–∏–æ–¥ ({period_text}) –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                reply_markup=get_back_keyboard("admin_export_menu"),
                parse_mode="Markdown"
            )
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_back_keyboard("admin_export_menu"),
            parse_mode="Markdown"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ", show_alert=True)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (summary, manage, –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.callback_query(F.data == "admin_summary")
async def callback_admin_summary(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—É—é —Å–≤–æ–¥–∫—É"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    try:
        stats = db.get_current_status()

        text = "üìä **–ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞**\n\n"
        text += f"üë• –í—Å–µ–≥–æ –±–æ–π—Ü–æ–≤: {stats['total']}\n"
        text += f"‚úÖ –í —á–∞—Å—Ç–∏: {stats['present']}\n"
        text += f"‚ùå –í–Ω–µ —á–∞—Å—Ç–∏: {stats['absent']}\n\n"

        if stats.get('location_groups'):
            text += "üìç **–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º:**\n\n"

            if '–í —á–∞—Å—Ç–∏' in stats['location_groups']:
                group = stats['location_groups']['–í —á–∞—Å—Ç–∏']
                text += f"üü¢ **–í —á–∞—Å—Ç–∏: {group['count']}**\n"
                for name in group['names'][:10]:
                    text += f"‚Ä¢ {name}\n"
                if len(group['names']) > 10:
                    text += f"... –∏ –µ—â–µ {len(group['names']) - 10}\n"
                text += "\n"

            for location, group in stats['location_groups'].items():
                if location != '–í —á–∞—Å—Ç–∏':
                    text += f"üî¥ **{location}: {group['count']}**\n"
                    for name in group['names'][:5]:
                        text += f"‚Ä¢ {name}\n"
                    if len(group['names']) > 5:
                        text += f"... –∏ –µ—â–µ {len(group['names']) - 5}\n"
                    text += "\n"

        if stats['total'] == 0:
            text += "‚ÑπÔ∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–π—Ü–æ–≤"

        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_panel"),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_summary: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data == "admin_manage")
async def callback_admin_manage(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)"""
    user_id = callback.from_user.id

    if user_id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
        return

    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_remove")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]

    await callback.message.edit_text(
        "üëë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_add")
async def callback_admin_add(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
    user_id = callback.from_user.id

    if user_id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_admin_id)
    await callback.message.edit_text(
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:\n"
        "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É /start\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ Telegram ID\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_back_keyboard("admin_manage"),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_admin_id)
async def handle_admin_id_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∞–¥–º–∏–Ω–∞"""
    admin_id_text = message.text.strip()

    try:
        admin_id = int(admin_id_text)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    target_user = db.get_user(admin_id)
    if not target_user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if db.is_admin(admin_id):
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user['full_name']} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        await state.clear()
        return

    if db.add_admin(admin_id):
        await state.clear()
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {target_user['full_name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data == "admin_list")
async def callback_admin_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"""
    user_id = callback.from_user.id

    if user_id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
        return

    try:
        admins = db.get_all_admins()

        if not admins:
            text = "üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = "üëë **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n\n"
            for admin in admins:
                status = "üëë –ì–ª–∞–≤–Ω—ã–π" if admin['id'] == MAIN_ADMIN_ID else "‚öôÔ∏è –ê–¥–º–∏–Ω"
                text += f"{status} **{admin['full_name']}**\n"
                text += f"ID: `{admin['id']}`\n"
                text += f"Username: @{admin['username']}\n\n"

        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_manage"),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_list: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data == "admin_remove")
async def callback_admin_remove(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
    user_id = callback.from_user.id

    if user_id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
        return

    try:
        admins = db.get_all_admins()
        regular_admins = [admin for admin in admins if admin['id'] != MAIN_ADMIN_ID]

        if not regular_admins:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
                "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω.",
                reply_markup=get_back_keyboard("admin_manage"),
                parse_mode="Markdown"
            )
            return

        text = "‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        text += "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"

        keyboard = []
        for admin in regular_admins:
            button_text = f"‚ùå {admin['full_name']}"
            callback_data = f"remove_admin_select_{admin['id']}"
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage")])

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_remove: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data.startswith("remove_admin_select_"))
async def callback_remove_admin_select(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    user_id = callback.from_user.id

    if user_id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
        return

    admin_id_to_remove = int(callback.data.split("_")[-1])

    admin_to_remove = db.get_user(admin_id_to_remove)

    if not admin_to_remove:
        await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"remove_admin_confirm_{admin_id_to_remove}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_remove")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage")]
    ]

    text = f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
    text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
    text += f"**{admin_to_remove['full_name']}**?\n\n"
    text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("remove_admin_confirm_"))
async def callback_remove_admin_confirm(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    user_id = callback.from_user.id

    if user_id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
        return

    admin_id_to_remove = int(callback.data.split("_")[-1])

    admin_to_remove = db.get_user(admin_id_to_remove)

    if not admin_to_remove:
        await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if db.delete_admin(admin_id_to_remove):
        await callback.message.edit_text(
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä **{admin_to_remove['full_name']}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_back_keyboard("admin_manage"),
            parse_mode="Markdown"
        )
        await callback.answer()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    user_id = message.from_user.id

    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    is_main_admin = user_id == MAIN_ADMIN_ID
    await message.answer(
        "‚öôÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã",
        reply_markup=get_admin_panel_keyboard(is_main_admin),
        parse_mode="Markdown"
    )

def get_notifications_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications_enable"),
            InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="notifications_disable")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏", callback_data="notifications_schedule"),
            InlineKeyboardButton(text="üì± –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notifications_types")
        ],
        [
            InlineKeyboardButton(text="üéØ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="notifications_test"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="notifications_stats")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏", callback_data="settings_cleanup"),
            InlineKeyboardButton(text="üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞", callback_data="settings_full_cleanup")
        ],
        [
            InlineKeyboardButton(text="üîÑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î", callback_data="settings_optimize"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î", callback_data="settings_db_stats")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="settings_system_info"),
            InlineKeyboardButton(text="üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_technical")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

@router.callback_query(F.data == "admin_notifications")
async def callback_admin_notifications(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üîî **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏**\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        "‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
        "‚Ä¢ –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
        reply_markup=get_notifications_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("notifications_"))
async def callback_notifications_action(callback: CallbackQuery):
    """–î–µ–π—Å—Ç–≤–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    action = callback.data.split("_")[-1]

    try:
        if action == "enable":
            text = "‚úÖ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã**\n\n"
            text += "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            text += "‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            text += "‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n"
            text += "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö\n"
            text += "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"

        elif action == "disable":
            text = "üîï **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã**\n\n"
            text += "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            text += "–í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è."

        elif action == "schedule":
            text = "‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n"
            text += "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:\n"
            text += "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: 09:00\n"
            text += "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00\n"
            text += "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n"
            text += "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

        elif action == "types":
            text = "üì± **–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
            text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
            text += "‚úÖ –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            text += "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
            text += "‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n"
            text += "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            text += "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            text += "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

        elif action == "test":
            text = "üéØ **–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            text += "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
            text += f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            text += "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."

        elif action == "stats":
            text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
            text += "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
            text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 42\n"
            text += "‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫: 42\n"
            text += "‚Ä¢ –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 0\n\n"
            text += "–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
            text += "‚Ä¢ –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 38\n"
            text += "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ: 4\n"
            text += "‚Ä¢ –û—Ç—á–µ—Ç—ã: 0"

        else:
            text = "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_notifications"),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ notifications_action: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)

@router.callback_query(F.data == "admin_settings")
async def callback_admin_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
        reply_markup=get_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("settings_"))
async def callback_settings_action(callback: CallbackQuery):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    action = callback.data.split("_")[-1]

    try:
        if action == "cleanup":
            # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
            deleted_count = db.cleanup_old_records(90)
            text = f"üßπ **–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            text += f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {deleted_count}\n"
            text += f"–ó–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
            text += "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞"

        elif action == "cleanup" and "full" in callback.data:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
            text = "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞**\n\n"
            text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!\n"
            text += "–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
            text += "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"

            keyboard = [
                [InlineKeyboardButton(text="üóëÔ∏è –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –û–ß–ò–°–¢–ö–£", callback_data="settings_confirm_full_cleanup")],
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data