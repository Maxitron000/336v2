from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from services.db_service import DBService
from config import MAIN_ADMIN_ID
from keyboards import get_admin_panel_keyboard, get_back_keyboard
import logging

router = Router()

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user_id == MAIN_ADMIN_ID:
        return True
    user = await DBService.get_user(user_id)
    return user and user.get('is_admin', False)

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        if not await is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        from keyboards import get_admin_panel_keyboard
        
        admin_text = """
üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:

/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel
        """
        await message.answer(
            admin_text,
            reply_markup=get_admin_panel_keyboard(message.from_user.id == MAIN_ADMIN_ID)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_admin: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "admin_panel")
async def callback_admin_panel(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ callback"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        await callback.message.edit_text(
            "üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_panel_keyboard(callback.from_user.id == MAIN_ADMIN_ID)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_panel: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "admin_stats")
async def callback_admin_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ callback"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        stats = await DBService.get_statistics()
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users', 0)}
üìù –ó–∞–ø–∏—Å–µ–π: {stats.get('records', 0)}
        """
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_keyboard("admin_panel")
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_stats: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "admin_users")
async def callback_admin_users(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ callback"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        users = await DBService.get_all_users()
        
        if not users:
            text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç"
        else:
            text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users:
                admin_mark = "üëë" if user['is_admin'] else "üë§"
                text += f"{admin_mark} {user['full_name']}\n"
                text += f"   ID: {user['id']}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_panel")
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_users: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "admin_records")
async def callback_admin_records(callback: CallbackQuery):
    """–í—Å–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ callback"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        records = await DBService.get_all_records(10)
        
        if not records:
            text = "üìù –ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç"
        else:
            text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:\n\n"
            for record in records:
                action_emoji = "üö∂" if record['action'] == '—É–±—ã–ª' else "üè†"
                text += f"{action_emoji} {record['full_name']}\n"
                text += f"   {record['action']} - {record['location']}\n"
                text += f"   {record['timestamp']}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_panel")
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_records: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")