
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.db_service import DBService
from config import MAIN_ADMIN_ID, LOCATIONS
from keyboards import *
import logging
import os
from datetime import datetime, timedelta
import pytz
import json
import io
import aiofiles
import openpyxl
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
import asyncio

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_admin_id = State()
    waiting_for_user_delete = State()
    waiting_for_confirmation = State()
    waiting_for_export_name = State()

# –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
KALININGRAD_TZ = pytz.timezone('Europe/Kaliningrad')

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user_id == MAIN_ADMIN_ID:
        return True
    user = await DBService.get_user(user_id)
    return user and user.get('is_admin', False)

async def is_main_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    return user_id == MAIN_ADMIN_ID

def format_kaliningrad_time(dt_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
    try:
        dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
        kld_time = dt.astimezone(KALININGRAD_TZ)
        return kld_time.strftime('%d.%m.%Y %H:%M')
    except:
        return dt_str

@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    try:
        if not await is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass

        admin_text = """
üõ°Ô∏è **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**
336 –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–º–∞—Å–∫–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–∞—Ç–∞–ª—å–æ–Ω

üéØ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º —Ç–∞–±–µ–ª–µ–º
‚ö° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:
        """
        
        await message.answer(
            admin_text,
            reply_markup=get_admin_main_keyboard(await is_main_admin(message.from_user.id)),
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_admin: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "admin_panel")
async def callback_admin_panel(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        await state.clear()
        
        admin_text = """
üõ°Ô∏è **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**
336 –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–º–∞—Å–∫–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–∞—Ç–∞–ª—å–æ–Ω

üéØ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º —Ç–∞–±–µ–ª–µ–º
‚ö° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:
        """
        
        await callback.message.edit_text(
            admin_text,
            reply_markup=get_admin_main_keyboard(await is_main_admin(callback.from_user.id)),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_panel: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "admin_personnel")
async def callback_admin_personnel(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return
        
        users = await DBService.get_all_users()
        soldiers = [u for u in users if not u.get('is_admin', False)]
        admins = [u for u in users if u.get('is_admin', False)]
        
        text = f"""
üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ò–ß–ù–´–ú –°–û–°–¢–ê–í–û–ú**

üìä **–°–≤–æ–¥–∫–∞:**
‚Ä¢ üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}
‚Ä¢ ü™ñ –õ–∏—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤: {len(soldiers)}
‚Ä¢ üìù –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}

‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await callback.message.edit_text(
            text,
            reply_markup=get_personnel_keyboard(),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_personnel: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "personnel_list")
async def callback_personnel_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return
        
        users = await DBService.get_all_users()
        soldiers = sorted([u for u in users if not u.get('is_admin', False)], 
                         key=lambda x: x['full_name'])
        
        if not soldiers:
            text = "üë• **–õ–ò–ß–ù–´–ô –°–û–°–¢–ê–í**\n\n‚ùå –õ–∏—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –ø—É—Å—Ç"
        else:
            text = f"üë• **–õ–ò–ß–ù–´–ô –°–û–°–¢–ê–í** ({len(soldiers)} —á–µ–ª.)\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            for i in range(0, len(soldiers), 2):
                left = soldiers[i]
                right = soldiers[i + 1] if i + 1 < len(soldiers) else None
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                records = await DBService.get_user_records(left['id'], 1)
                left_status = "üè†" if records and records[0]['action'] == '–ø—Ä–∏–±—ã–ª' else "üö∂"
                
                line = f"{left_status} {left['full_name']}"
                
                if right:
                    right_records = await DBService.get_user_records(right['id'], 1)
                    right_status = "üè†" if right_records and right_records[0]['action'] == '–ø—Ä–∏–±—ã–ª' else "üö∂"
                    line += f"  |  {right_status} {right['full_name']}"
                
                text += line + "\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_personnel"),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_personnel_list: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "personnel_status")
async def callback_personnel_status(callback: CallbackQuery):
    """–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–æ–π—Ü–æ–≤"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return
        
        text = """
üìä **–°–¢–ê–¢–£–° –õ–ò–ß–ù–û–ì–û –°–û–°–¢–ê–í–ê**

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
        """
        
        await callback.message.edit_text(
            text,
            reply_markup=get_status_keyboard(),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_personnel_status: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("status_"))
async def callback_status_display(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return
        
        status_type = callback.data.split("_")[1]  # all, present, absent
        
        users = await DBService.get_all_users()
        soldiers = sorted([u for u in users if not u.get('is_admin', False)], 
                         key=lambda x: x['full_name'])
        
        present = []
        absent = []
        
        for soldier in soldiers:
            records = await DBService.get_user_records(soldier['id'], 1)
            if records and records[0]['action'] == '–ø—Ä–∏–±—ã–ª':
                present.append((soldier, records[0]))
            else:
                absent.append((soldier, records[0] if records else None))
        
        if status_type == "all":
            text = f"""
üìä **–°–¢–ê–¢–£–° –í–°–ï–•** ({len(soldiers)} —á–µ–ª.)

üè† **–ù–ê –ú–ï–°–¢–ï** ({len(present)} —á–µ–ª.):
"""
            for soldier, record in present:
                time_str = format_kaliningrad_time(record['timestamp']) if record else "‚Äî"
                location = record['location'] if record else "‚Äî"
                text += f"‚Ä¢ {soldier['full_name']} ({time_str}, {location})\n"
            
            text += f"\nüö∂ **–£–ë–´–õ–ò** ({len(absent)} —á–µ–ª.):\n"
            for soldier, record in absent:
                time_str = format_kaliningrad_time(record['timestamp']) if record else "‚Äî"
                location = record['location'] if record else "‚Äî"
                text += f"‚Ä¢ {soldier['full_name']} ({time_str}, {location})\n"
                
        elif status_type == "present":
            text = f"üè† **–ù–ê –ú–ï–°–¢–ï** ({len(present)} —á–µ–ª.):\n\n"
            for soldier, record in present:
                time_str = format_kaliningrad_time(record['timestamp']) if record else "‚Äî"
                location = record['location'] if record else "‚Äî"
                text += f"‚Ä¢ {soldier['full_name']}\n  üìç {location}\n  ‚è∞ {time_str}\n\n"
                
        else:  # absent
            text = f"üö∂ **–£–ë–´–õ–ò** ({len(absent)} —á–µ–ª.):\n\n"
            for soldier, record in absent:
                time_str = format_kaliningrad_time(record['timestamp']) if record else "‚Äî"
                location = record['location'] if record else "‚Äî"
                text += f"‚Ä¢ {soldier['full_name']}\n  üìç {location}\n  ‚è∞ {time_str}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("personnel_status"),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_status_display: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "personnel_delete")
async def callback_personnel_delete(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ–π—Ü–∞"""
    try:
        if not await is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É", show_alert=True)
            return
        
        users = await DBService.get_all_users()
        soldiers = sorted([u for u in users if not u.get('is_admin', False)], 
                         key=lambda x: x['full_name'])
        
        if not soldiers:
            await callback.answer("‚ùå –ù–µ—Ç –±–æ–π—Ü–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return
        
        text = """
‚ùå **–£–î–ê–õ–ï–ù–ò–ï –ë–û–ô–¶–ê**

‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!
–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ –±–æ–π—Ü–∞.

üìù –í–≤–µ–¥–∏—Ç–µ **—Ç–æ—á–Ω—É—é —Ñ–∞–º–∏–ª–∏—é** –±–æ–π—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–π—Ü—ã:**
"""
        
        for soldier in soldiers:
            text += f"‚Ä¢ {soldier['full_name']}\n"
        
        await state.set_state(AdminStates.waiting_for_user_delete)
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_personnel"),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_personnel_delete: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.message(AdminStates.waiting_for_user_delete)
async def process_user_delete(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        name_to_delete = message.text.strip()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = await DBService.get_all_users()
        target_user = None
        
        for user in users:
            if user['full_name'] == name_to_delete and not user.get('is_admin', False):
                target_user = user
                break
        
        if not target_user:
            await message.answer(
                f"‚ùå –ë–æ–µ—Ü —Å –∏–º–µ–Ω–µ–º '{name_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:",
                reply_markup=get_back_keyboard("admin_personnel")
            )
            return
        
        # –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.update_data(user_to_delete=target_user['id'])
        await state.set_state(AdminStates.waiting_for_confirmation)
        
        confirm_text = f"""
‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø**

üë§ **–ë–æ–µ—Ü:** {target_user['full_name']}
üÜî **ID:** {target_user['id']}

‚ùó **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!**
–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –±–æ–π—Ü–∞.

üî¥ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: **–î–ê**
        """
        
        await message.answer(
            confirm_text,
            reply_markup=get_back_keyboard("admin_personnel"),
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_user_delete: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(AdminStates.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        confirmation = message.text.strip().upper()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
        
        if confirmation != "–î–ê":
            await message.answer(
                "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏: **–î–ê**",
                reply_markup=get_back_keyboard("admin_personnel"),
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = data.get('user_to_delete')
        
        if not user_id:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_keyboard("admin_personnel")
            )
            await state.clear()
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await DBService.delete_user(user_id)
        
        if success:
            await message.answer(
                "‚úÖ **–ë–æ–µ—Ü —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**\n\n–í—Å–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                reply_markup=get_back_keyboard("admin_personnel"),
                parse_mode='Markdown'
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ–π—Ü–∞",
                reply_markup=get_back_keyboard("admin_personnel")
            )
        
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_confirmation: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()

@router.callback_query(F.data == "admin_manage")
async def callback_admin_manage(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    try:
        if not await is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É", show_alert=True)
            return
        
        admins = await DBService.get_all_admins()
        
        text = f"""
üëë **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò**

üìä **–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:** {len(admins)}

"""
        
        for admin in admins:
            role = "üëë –ì–ª–∞–≤–Ω—ã–π" if admin['id'] == MAIN_ADMIN_ID else "üõ°Ô∏è –ê–¥–º–∏–Ω"
            text += f"‚Ä¢ {role} {admin['full_name']}\n"
        
        text += "\n‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_manage_keyboard(),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_manage: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "add_admin")
async def callback_add_admin(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        if not await is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É", show_alert=True)
            return
        
        users = await DBService.get_all_users()
        soldiers = [u for u in users if not u.get('is_admin', False)]
        
        if not soldiers:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return
        
        text = """
‚ûï **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê**

üìù –í–≤–µ–¥–∏—Ç–µ **Telegram ID** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üí° **–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID:**
1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start
2. –ù–∞–π–¥–∏—Ç–µ –µ–≥–æ ID –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
"""
        
        for soldier in sorted(soldiers, key=lambda x: x['full_name']):
            text += f"‚Ä¢ {soldier['full_name']} (ID: `{soldier['id']}`)\n"
        
        await state.set_state(AdminStates.waiting_for_admin_id)
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_manage"),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_add_admin: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.message(AdminStates.waiting_for_admin_id)
async def process_admin_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
        
        try:
            admin_id = int(message.text.strip())
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:",
                reply_markup=get_back_keyboard("admin_manage")
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await DBService.get_user(admin_id)
        if not user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID:",
                reply_markup=get_back_keyboard("admin_manage")
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–¥–º–∏–Ω –ª–∏ —É–∂–µ
        if user.get('is_admin', False):
            await message.answer(
                f"‚ùå {user['full_name']} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                reply_markup=get_back_keyboard("admin_manage")
            )
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        success = await DBService.set_admin_status(admin_id, True)
        
        if success:
            await message.answer(
                f"‚úÖ **{user['full_name']}** –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                reply_markup=get_back_keyboard("admin_manage"),
                parse_mode='Markdown'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            try:
                from main import bot
                await bot.send_message(
                    admin_id,
                    "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è.",
                    parse_mode='Markdown'
                )
            except:
                pass
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=get_back_keyboard("admin_manage")
            )
        
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_admin_id: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()

@router.callback_query(F.data == "admin_journal")
async def callback_admin_journal(callback: CallbackQuery):
    """–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return
        
        stats = await DBService.get_statistics()
        
        text = f"""
üìñ **–ñ–£–†–ù–ê–õ –°–û–ë–´–¢–ò–ô**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats.get('records', 0)}
‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users', 0)}
‚Ä¢ üïê –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_records', 0)}

‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await callback.message.edit_text(
            text,
            reply_markup=get_journal_keyboard(),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_journal: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "journal_view")
async def callback_journal_view(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return
        
        records = await DBService.get_all_records_with_names(20)
        
        if not records:
            text = "üìñ **–ñ–£–†–ù–ê–õ –°–û–ë–´–¢–ò–ô**\n\n‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç"
        else:
            text = f"üìñ **–ñ–£–†–ù–ê–õ –°–û–ë–´–¢–ò–ô** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)\n\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –§–ò–û
            records_sorted = sorted(records, key=lambda x: x['full_name'])
            
            for record in records_sorted[:20]:
                action_emoji = "üè†" if record['action'] == '–ø—Ä–∏–±—ã–ª' else "üö∂"
                time_str = format_kaliningrad_time(record['timestamp'])
                
                text += f"{action_emoji} **{record['full_name']}**\n"
                text += f"   üìç {record['action']} - {record['location']}\n"
                text += f"   ‚è∞ {time_str}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_journal"),
            parse_mode='Markdown'
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_journal_view: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "journal_export")
async def callback_journal_export(callback: CallbackQuery, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return
        
        await callback.answer("üì§ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...", show_alert=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –∏–º–µ–Ω–∞–º–∏
        records = await DBService.get_all_records_with_names(1000)
        
        if not records:
            await callback.message.edit_text(
                "‚ùå **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞**",
                reply_markup=get_back_keyboard("admin_journal"),
                parse_mode='Markdown'
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        excel_file = await create_excel_export(records)
        
        if excel_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            file = FSInputFile(excel_file, filename=f"journal_{datetime.now().strftime('%d_%m_%Y')}.xlsx")
            
            await callback.message.answer_document(
                file,
                caption=f"üìä **–ñ—É—Ä–Ω–∞–ª —Ç–∞–±–µ–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥**\n\nüìÖ –î–∞—Ç–∞: {datetime.now(KALININGRAD_TZ).strftime('%d.%m.%Y %H:%M')}\nüìù –ó–∞–ø–∏—Å–µ–π: {len(records)}\nüèõÔ∏è 336 –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–º–∞—Å–∫–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–∞—Ç–∞–ª—å–æ–Ω",
                parse_mode='Markdown'
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(excel_file)
            except:
                pass
            
            await callback.message.edit_text(
                "‚úÖ **–ñ—É—Ä–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!**",
                reply_markup=get_back_keyboard("admin_journal"),
                parse_mode='Markdown'
            )
        else:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞**",
                reply_markup=get_back_keyboard("admin_journal"),
                parse_mode='Markdown'
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_journal_export: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")

async def create_excel_export(records):
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    try:
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ñ—É—Ä–Ω–∞–ª –≤—ã—Ö–æ–¥–æ–≤"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['‚Ññ', '–§–ò–û', '–î–µ–π—Å—Ç–≤–∏–µ', '–õ–æ–∫–∞—Ü–∏—è', '–î–∞—Ç–∞', '–í—Ä–µ–º—è']
        ws.append(headers)
        
        # –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="2E86AB", end_color="2E86AB", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        for col in range(1, len(headers) + 1):
            cell = ws.cell(row=1, column=col)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # –î–∞–Ω–Ω—ã–µ
        arrive_fill = PatternFill(start_color="C8E6C9", end_color="C8E6C9", fill_type="solid")  # –ó–µ–ª–µ–Ω—ã–π
        leave_fill = PatternFill(start_color="FFCDD2", end_color="FFCDD2", fill_type="solid")   # –ö—Ä–∞—Å–Ω—ã–π
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –§–ò–û
        sorted_records = sorted(records, key=lambda x: (x['full_name'], x['timestamp']))
        
        for idx, record in enumerate(sorted_records, 1):
            dt = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
            kld_time = dt.astimezone(KALININGRAD_TZ)
            
            row_data = [
                idx,
                record['full_name'],
                record['action'],
                record['location'],
                kld_time.strftime('%d.%m.%Y'),
                kld_time.strftime('%H:%M')
            ]
            
            ws.append(row_data)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∑–∞–ª–∏–≤–∫—É
            fill = arrive_fill if record['action'] == '–ø—Ä–∏–±—ã–ª' else leave_fill
            for col in range(1, len(row_data) + 1):
                ws.cell(row=idx + 1, column=col).fill = fill
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 5
        ws.column_dimensions['B'].width = 25
        ws.column_dimensions['C'].width = 12
        ws.column_dimensions['D'].width = 20
        ws.column_dimensions['E'].width = 12
        ws.column_dimensions['F'].width = 8
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        ws.insert_rows(1)
        ws.merge_cells('A1:F1')
        title_cell = ws['A1']
        title_cell.value = f"–ñ–£–†–ù–ê–õ –í–´–•–û–î–ê –í –ì–û–†–û–î - 336 –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–º–∞—Å–∫–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–∞—Ç–∞–ª—å–æ–Ω ({datetime.now(KALININGRAD_TZ).strftime('%d.%m.%Y')})"
        title_cell.font = Font(bold=True, size=14)
        title_cell.alignment = Alignment(horizontal="center")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"journal_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        wb.save(filename)
        
        return filename
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {e}")
        return None
