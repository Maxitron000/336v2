from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.db_service import DatabaseService
from config import MAIN_ADMIN_ID
import logging
from datetime import datetime, timedelta

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    waiting_for_admin_id = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseService()

def get_admin_panel_keyboard(is_main_admin: bool = False):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = [
        [InlineKeyboardButton(text="üìä –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞", callback_data="admin_summary")],
        [InlineKeyboardButton(text="üìã –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π", callback_data="admin_journal")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")]
    ]

    if is_main_admin:
        keyboard.append([InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_manage")])

    keyboard.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_back_keyboard(callback_data: str = "admin_panel"):
    """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞
    if user_id == MAIN_ADMIN_ID:
        return True
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return db.is_admin(user_id)

@router.callback_query(F.data == "admin_panel")
async def callback_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    is_main_admin = user_id == MAIN_ADMIN_ID
    await callback.message.edit_text(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_panel_keyboard(is_main_admin)
    )
    await callback.answer()

@router.callback_query(F.data == "admin_summary")
async def callback_admin_summary(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—É—é —Å–≤–æ–¥–∫—É"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db.get_current_status()

        text = "üìä –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞\n\n"
        text += f"üë• –í—Å–µ–≥–æ –±–æ–π—Ü–æ–≤: {stats['total']}\n"
        text += f"‚úÖ –í —á–∞—Å—Ç–∏: {stats['present']}\n"
        text += f"‚ùå –í–Ω–µ —á–∞—Å—Ç–∏: {stats['absent']}\n\n"

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        if stats.get('location_groups'):
            text += "üìç **–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º:**\n\n"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö, –∫—Ç–æ –≤ —á–∞—Å—Ç–∏
            if '–í —á–∞—Å—Ç–∏' in stats['location_groups']:
                group = stats['location_groups']['–í —á–∞—Å—Ç–∏']
                text += f"üü¢ **–í —á–∞—Å—Ç–∏: {group['count']}**\n"
                for name in group['names'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                    text += f"‚Ä¢ {name}\n"
                if len(group['names']) > 10:
                    text += f"... –∏ –µ—â–µ {len(group['names']) - 10}\n"
                text += "\n"
            
            # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
            for location, group in stats['location_groups'].items():
                if location != '–í —á–∞—Å—Ç–∏':
                    text += f"üî¥ **{location}: {group['count']}**\n"
                    for name in group['names'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ª–æ–∫–∞—Ü–∏–π
                        text += f"‚Ä¢ {name}\n"
                    if len(group['names']) > 5:
                        text += f"... –∏ –µ—â–µ {len(group['names']) - 5}\n"
                    text += "\n"
        
        if stats['total'] == 0:
            text += "‚ÑπÔ∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–π—Ü–æ–≤"

        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_panel")
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_summary: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data == "admin_journal")
async def callback_admin_journal(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    #await show_admin_journal_page(callback, 1)
    #await callback.answer()
    await show_admin_journal(callback)
    await callback.answer()

async def show_admin_journal(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∂—É—Ä–Ω–∞–ª–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
        records = db.get_all_records(days=7, limit=10)

        if not records:
            text = "üìã **–ñ—É—Ä–Ω–∞–ª –∑–∞–ø–∏—Å–µ–π**\n\nüìù –ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = "üìã **–ñ—É—Ä–Ω–∞–ª –∑–∞–ø–∏—Å–µ–π**\n"
            text += "‚îÄ" * 30 + "\n\n"

            for i, record in enumerate(records, 1):
                timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                formatted_date = timestamp.strftime('%d.%m.%Y')
                formatted_time = timestamp.strftime('%H:%M')

                if record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
                    action_emoji = "üö∂"
                    action_text = "**—É–±—ã–ª**"
                    status_color = "üî¥"
                else:
                    action_emoji = "üè†"
                    action_text = "**–ø—Ä–∏–±—ã–ª**"
                    status_color = "üü¢"

                text += f"{status_color} {i}. üë§ **{record['full_name']}**\n"
                text += f"{action_emoji} {action_text} - {record['location']}\n"
                text += f"üìÖ {formatted_date} –≤ {formatted_time}\n"

                if i < len(records):
                    text += "‚îÄ" * 25 + "\n\n"

        keyboard = [
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_journal_stats")],
            [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel", callback_data="admin_journal_export")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]

        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_journal_stats")],
            [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel", callback_data="admin_journal_export")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_journal")]])
        )
        await callback.answer()

#async def show_admin_journal_page(callback: CallbackQuery, page: int, days: int = 7):
#    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞"""
#    try:
#        per_page = 8
#
#        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
#        result = db.get_records_paginated(page=page, per_page=per_page, days=days)
#
#        if not result['records']:
#            text = f"üìã –ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
#            keyboard = get_back_keyboard("admin_panel")
#        else:
#            text = f"üìã –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –∑–∞ {days} –¥–Ω–µ–π (—Å—Ç—Ä. {page}/{result['total_pages']}):\n\n"
#
#            for i, record in enumerate(result['records'], 1):
#                timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
#                formatted_time = timestamp.strftime('%d.%m %H:%M')
#
#                if record['action'] == "–Ω–µ –≤ —á–∞—Å—Ç–∏":
#                    action_emoji = "üî¥"
#                    action_text = "–Ω–µ –≤ —á–∞—Å—Ç–∏"
#                elif record['action'] == "–≤ —á–∞—Å—Ç–∏":
#                    action_emoji = "üü¢"
#                    action_text = "–≤ —á–∞—Å—Ç–∏"
#                else:
#                    action_emoji = "üî¥" if "—É–±—ã–ª" in record['action'] else "üü¢"
#                    action_text = record['action']
#
#                location = record['location'][:20] + "..." if len(record['location']) > 20 else record['location']
#                text += f"{i}. üë§ {record['full_name']}\n"
#                text += f"   {action_emoji} {action_text} - {location}\n"
#                text += f"   ‚è∞ {formatted_time}\n\n"
#
#            text += f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {result['total_records']}"
#
#            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
#            keyboard = get_admin_journal_keyboard(page, result['total_pages'], days)
#
#        await callback.message.edit_text(text, reply_markup=keyboard)
#
#    except Exception as e:
#        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_journal_page: {e}")
#        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

#def get_admin_journal_keyboard(current_page: int, total_pages: int, days: int = 7):
#    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
#    keyboard = []
#
#    # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥—É
#    period_row = []
#    period_row.append(InlineKeyboardButton(text="1–¥" if days == 1 else "üìÖ1–¥", callback_data="admin_journal_1"))
#    period_row.append(InlineKeyboardButton(text="7–¥" if days == 7 else "üìÖ7–¥", callback_data="admin_journal_7"))
#    period_row.append(InlineKeyboardButton(text="30–¥" if days == 30 else "üìÖ30–¥", callback_data="admin_journal_30"))
#    keyboard.append(period_row)
#
#    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
#    if total_pages > 1:
#        pagination_row = []
#
#        if current_page > 1:
#            pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"admin_journal_page_{current_page - 1}_{days}"))
#
#        pagination_row.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="admin_journal_info"))
#
#        if current_page < total_pages:
#            pagination_row.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"admin_journal_page_{current_page + 1}_{days}"))
#
#        keyboard.append(pagination_row)
#
#    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#    keyboard.append([InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")])
#    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
#
#    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞
#@router.callback_query(F.data.startswith("admin_journal_page_"))
#async def callback_admin_journal_pagination(callback: CallbackQuery):
#    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞"""
#    try:
#        parts = callback.data.split("_")
#        page = int(parts[3])
#        days = int(parts[4]) if len(parts) > 4 else 7
#
#        await show_admin_journal_page(callback, page, days)
#        await callback.answer()
#    except Exception as e:
#        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_journal_pagination: {e}")
#        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º")

#@router.callback_query(F.data.in_(["admin_journal_1", "admin_journal_7", "admin_journal_30"]))
#async def callback_admin_journal_period(callback: CallbackQuery):
#    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –∂—É—Ä–Ω–∞–ª–µ"""
#    try:
#        days = int(callback.data.split("_")[-1])
#        await show_admin_journal_page(callback, 1, days)
#        await callback.answer()
#    except Exception as e:
#        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_journal_period: {e}")
#        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞")

@router.callback_query(F.data == "admin_journal_info")
async def callback_admin_journal_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞"""
    await callback.answer()

@router.callback_query(F.data == "admin_export")
async def callback_admin_export(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    try:
        filename = db.export_to_excel(days=30)
        if filename:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            from aiogram.types import FSInputFile
            document = FSInputFile(filename, filename="military_records.xlsx")
            await callback.message.answer_document(
                document,
                caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
            )
            await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ", show_alert=True)

@router.callback_query(F.data == "admin_manage")
async def callback_admin_manage(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)"""
    user_id = callback.from_user.id

    if user_id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
        return

    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_remove")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]

    await callback.message.edit_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data == "admin_add")
async def callback_admin_add(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
    user_id = callback.from_user.id

    if user_id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_admin_id)
    await callback.message.edit_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:\n"
        "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É /start\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ Telegram ID\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_back_keyboard("admin_manage")
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_admin_id)
async def handle_admin_id_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∞–¥–º–∏–Ω–∞"""
    admin_id_text = message.text.strip()

    try:
        admin_id = int(admin_id_text)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    target_user = db.get_user(admin_id)
    if not target_user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–æ–º
    if db.is_admin(admin_id):
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user['full_name']} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if db.add_admin(admin_id):
        await state.clear()
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {target_user['full_name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data == "admin_list")
async def callback_admin_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"""
    user_id = callback.from_user.id

    if user_id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
        return

    try:
        admins = db.get_all_admins()

        if not admins:
            text = "üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            for admin in admins:
                status = "üëë –ì–ª–∞–≤–Ω—ã–π" if admin['id'] == MAIN_ADMIN_ID else "‚öôÔ∏è –ê–¥–º–∏–Ω"
                text += f"{status} {admin['full_name']}\n"
                text += f"ID: {admin['id']}\n"
                text += f"Username: @{admin['username']}\n\n"

        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_manage")
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_list: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    user_id = message.from_user.id

    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    is_main_admin = user_id == MAIN_ADMIN_ID
    await message.answer(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_panel_keyboard(is_main_admin)
    )