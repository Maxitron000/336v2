
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.db_service import DatabaseService
from datetime import datetime, timedelta
import logging
import asyncio

router = Router()
db = DatabaseService()

class NotificationStates(StatesGroup):
    waiting_for_custom_message = State()
    waiting_for_schedule_time = State()

class SmartNotificationSystem:
    def __init__(self):
        self.db = DatabaseService()
        self.active_alerts = {}
        
    async def check_suspicious_patterns(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç—ã–µ –æ—Ç–ª—É—á–∫–∏ –æ–¥–Ω–æ–≥–æ –±–æ–π—Ü–∞
        records = self.db.get_all_records(days=7)
        user_departures = {}
        
        for record in records:
            if record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
                name = record['full_name']
                user_departures[name] = user_departures.get(name, 0) + 1
        
        for name, count in user_departures.items():
            if count > 10:  # –ë–æ–ª–µ–µ 10 –æ—Ç–ª—É—á–µ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
                alerts.append({
                    'type': 'frequent_departures',
                    'user': name,
                    'count': count,
                    'message': f"‚ö†Ô∏è {name} –∏–º–µ–µ—Ç {count} –æ—Ç–ª—É—á–µ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é"
                })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
        current_status = self.db.get_current_status()
        for user in current_status.get('absent_users', []):
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–º–µ—Ç–∫—É "–≤ —á–∞—Å—Ç–∏"
            last_present = self.db.get_last_present_record(user['user_id'])
            if last_present:
                last_time = datetime.fromisoformat(last_present['timestamp'].replace('Z', '+00:00'))
                hours_absent = (datetime.now() - last_time).total_seconds() / 3600
                
                if hours_absent > 24:  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–æ–ª–µ–µ —Å—É—Ç–æ–∫
                    alerts.append({
                        'type': 'long_absence',
                        'user': user['name'],
                        'hours': int(hours_absent),
                        'location': user['location'],
                        'message': f"üö® {user['name']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {int(hours_absent)} —á–∞—Å–æ–≤ ({user['location']})"
                    })
        
        return alerts
    
    async def send_smart_alerts(self, bot):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            alerts = await self.check_suspicious_patterns()
            
            if alerts:
                text = "üîç **–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã—è–≤–∏–ª:**\n\n"
                for alert in alerts:
                    text += f"‚Ä¢ {alert['message']}\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
                from config import MAIN_ADMIN_ID
                await bot.send_message(MAIN_ADMIN_ID, text, parse_mode="Markdown")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
smart_notifications = SmartNotificationSystem()

def get_notification_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", callback_data="notify_broadcast"),
            InlineKeyboardButton(text="üéØ –í—ã–±–æ—Ä–æ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="notify_selective")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="notify_scheduled"),
            InlineKeyboardButton(text="üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="notify_emergency")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="notify_stats"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="notify_settings")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

@router.callback_query(F.data == "admin_notifications_advanced")
async def callback_advanced_notifications(callback: CallbackQuery):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    from handlers.admin import is_admin
    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üì¢ **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
        "üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º\n"
        "‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
        "‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_notification_management_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "notify_broadcast")
async def callback_notify_broadcast(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    await state.set_state(NotificationStates.waiting_for_custom_message)
    await callback.message.edit_text(
        "üì¢ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
        "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_notifications_advanced")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(NotificationStates.waiting_for_custom_message)
async def handle_custom_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    custom_text = message.text.strip()
    
    if len(custom_text) > 1000:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.get_all_users()
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_notifications_advanced")
        ]
    ]
    
    await state.update_data(broadcast_text=custom_text)
    await message.answer(
        f"üì¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        f"**–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**\n{custom_text}\n\n"
        f"üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {len(users)}\n\n"
        f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "confirm_broadcast")
async def callback_confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    broadcast_text = data.get('broadcast_text')
    
    if not broadcast_text:
        await callback.answer("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω", show_alert=True)
        return
    
    users = db.get_all_users()
    sent_count = 0
    failed_count = 0
    
    await callback.message.edit_text("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞...", parse_mode="Markdown")
    
    for user in users:
        try:
            await callback.bot.send_message(
                user['id'],
                f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{broadcast_text}",
                parse_mode="Markdown"
            )
            sent_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            await asyncio.sleep(0.1)
            
        except Exception as e:
            failed_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")
    
    await state.clear()
    
    result_text = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:**\n\n"
    result_text += f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
    result_text += f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
    result_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
    result_text += f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(sent_count/len(users)*100):.1f}%"
    
    await callback.message.edit_text(
        result_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_notifications_advanced")]
        ]),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "notify_emergency")
async def callback_notify_emergency(callback: CallbackQuery):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    emergency_templates = [
        "üö® –í–ù–ò–ú–ê–ù–ò–ï! –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞!",
        "‚ö†Ô∏è –¢–†–ï–í–û–ì–ê! –í—Å–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —è–≤–∏—Ç—å—Å—è –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏!",
        "üî¥ –°–†–û–ß–ù–û! –û—Ç–º–µ–Ω—è—é—Ç—Å—è –≤—Å–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ —á–∞—Å—Ç—å!",
        "üì¢ –í–ê–ñ–ù–û! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!",
        "üöÅ –£–ß–ï–ù–ò–ï! –í—Å–µ–º —Å–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫–∞–∑–∞—Ä–º–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
    ]
    
    keyboard = []
    for i, template in enumerate(emergency_templates):
        short_text = template[:30] + "..." if len(template) > 30 else template
        keyboard.append([InlineKeyboardButton(
            text=short_text, 
            callback_data=f"emergency_template_{i}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="üìù –°–≤–æ–π —Ç–µ–∫—Å—Ç", callback_data="emergency_custom")])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_notifications_advanced")])
    
    await callback.message.edit_text(
        "üö® **–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n"
        "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç:\n\n"
        "üí° –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("emergency_template_"))
async def callback_emergency_template(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É"""
    template_index = int(callback.data.split("_")[-1])
    
    emergency_templates = [
        "üö® –í–ù–ò–ú–ê–ù–ò–ï! –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞!",
        "‚ö†Ô∏è –¢–†–ï–í–û–ì–ê! –í—Å–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —è–≤–∏—Ç—å—Å—è –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏!",
        "üî¥ –°–†–û–ß–ù–û! –û—Ç–º–µ–Ω—è—é—Ç—Å—è –≤—Å–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ —á–∞—Å—Ç—å!",
        "üì¢ –í–ê–ñ–ù–û! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!",
        "üöÅ –£–ß–ï–ù–ò–ï! –í—Å–µ–º —Å–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫–∞–∑–∞—Ä–º–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
    ]
    
    message_text = emergency_templates[template_index]
    
    keyboard = [
        [
            InlineKeyboardButton(text="üö® –û–¢–ü–†–ê–í–ò–¢–¨ –í–°–ï–ú", callback_data=f"send_emergency_{template_index}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="notify_emergency")
        ]
    ]
    
    await callback.message.edit_text(
        f"üö® **–≠–ö–°–¢–†–ï–ù–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï**\n\n"
        f"**–¢–µ–∫—Å—Ç:**\n{message_text}\n\n"
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("send_emergency_"))
async def callback_send_emergency(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    template_index = int(callback.data.split("_")[-1])
    
    emergency_templates = [
        "üö® –í–ù–ò–ú–ê–ù–ò–ï! –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞!",
        "‚ö†Ô∏è –¢–†–ï–í–û–ì–ê! –í—Å–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —è–≤–∏—Ç—å—Å—è –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏!",
        "üî¥ –°–†–û–ß–ù–û! –û—Ç–º–µ–Ω—è—é—Ç—Å—è –≤—Å–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ —á–∞—Å—Ç—å!",
        "üì¢ –í–ê–ñ–ù–û! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!",
        "üöÅ –£–ß–ï–ù–ò–ï! –í—Å–µ–º —Å–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫–∞–∑–∞—Ä–º–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
    ]
    
    message_text = emergency_templates[template_index]
    users = db.get_all_users()
    
    await callback.message.edit_text("üö® –û–¢–ü–†–ê–í–ö–ê –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø...", parse_mode="Markdown")
    
    sent_count = 0
    for user in users:
        try:
            await callback.bot.send_message(
                user['id'],
                f"üö® **–≠–ö–°–¢–†–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï**\n\n{message_text}\n\n‚è∞ {datetime.now().strftime('%H:%M')}",
                parse_mode="Markdown"
            )
            sent_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")
    
    await callback.message.edit_text(
        f"üö® **–≠–ö–°–¢–†–ï–ù–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û**\n\n"
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(users)}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_notifications_advanced")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", show_alert=True)
