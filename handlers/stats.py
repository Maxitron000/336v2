from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from services.db_service import DatabaseService
from config import MAIN_ADMIN_ID

router = Router()
db = DatabaseService()

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if message.from_user.id != MAIN_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    try:
        stats = db.get_current_status()

        stats_text = f"""üìä **–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë• –í—Å–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞: {stats['total']}
‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {stats['present']}
‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {stats['absent']}

**üìç –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ:**
"""

        if stats['absent_list']:
            for person in stats['absent_list']:
                stats_text += f"‚Ä¢ {person['name']} ({person['location']})\n"
        else:
            stats_text += "–í—Å–µ –Ω–∞ –º–µ—Å—Ç–µ! ‚úÖ"

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from services.db_service import DatabaseService
from config import MAIN_ADMIN_ID
import logging
from datetime import datetime, timedelta

router = Router()
db = DatabaseService()

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user_id == MAIN_ADMIN_ID:
        return True
    return db.is_admin(user_id)

@router.callback_query(F.data == "admin_stats")
async def callback_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        stats_today = db.get_all_records(days=1)
        stats_week = db.get_all_records(days=7)
        stats_month = db.get_all_records(days=30)
        
        current_status = db.get_current_status()
        
        text = "üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        
        # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        text += "üîÑ **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**\n"
        text += f"üë• –í—Å–µ–≥–æ –±–æ–π—Ü–æ–≤: {current_status['total']}\n"
        text += f"‚úÖ –í —á–∞—Å—Ç–∏: {current_status['present']}\n"
        text += f"‚ùå –í–Ω–µ —á–∞—Å—Ç–∏: {current_status['absent']}\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        text += "üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        text += f"üìÖ –°–µ–≥–æ–¥–Ω—è: {len(stats_today)} –∑–∞–ø–∏—Å–µ–π\n"
        text += f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {len(stats_week)} –∑–∞–ø–∏—Å–µ–π\n"
        text += f"üìÖ –ó–∞ –º–µ—Å—è—Ü: {len(stats_month)} –∑–∞–ø–∏—Å–µ–π\n\n"
        
        # –¢–û–ü –ª–æ–∫–∞—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        if stats_week:
            locations = {}
            for record in stats_week:
                if record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
                    loc = record['location']
                    locations[loc] = locations.get(loc, 0) + 1
            
            if locations:
                text += "üèÜ **–¢–û–ü –ª–æ–∫–∞—Ü–∏–∏ (–Ω–µ–¥–µ–ª—è):**\n"
                sorted_locations = sorted(locations.items(), key=lambda x: x[1], reverse=True)[:5]
                for i, (location, count) in enumerate(sorted_locations, 1):
                    text += f"{i}. {location}: {count} —Ä–∞–∑\n"
        
        keyboard = [
            [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "admin_journal_stats")
async def callback_journal_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂—É—Ä–Ω–∞–ª—É"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        records = db.get_all_records(days=7, limit=1000)
        
        if not records:
            text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂—É—Ä–Ω–∞–ª–∞**\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π."
        else:
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
            actions_count = {}
            users_activity = {}
            locations_count = {}
            
            for record in records:
                # –ü–æ–¥—Å—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π
                action = record['action']
                actions_count[action] = actions_count.get(action, 0) + 1
                
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_name = record['full_name']
                users_activity[user_name] = users_activity.get(user_name, 0) + 1
                
                # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É–±—ã—Ç–∏—è
                if action == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
                    location = record['location']
                    locations_count[location] = locations_count.get(location, 0) + 1
            
            text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ (7 –¥–Ω–µ–π)**\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
            text += "üìã **–ü–æ –¥–µ–π—Å—Ç–≤–∏—è–º:**\n"
            for action, count in actions_count.items():
                emoji = "üü¢" if action == "–≤ —á–∞—Å—Ç–∏" else "üî¥"
                text += f"{emoji} {action}: {count} —Ä–∞–∑\n"
            text += "\n"
            
            # –¢–û–ü –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            text += "üë• **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ (–¢–û–ü-5):**\n"
            sorted_users = sorted(users_activity.items(), key=lambda x: x[1], reverse=True)[:5]
            for i, (user, count) in enumerate(sorted_users, 1):
                text += f"{i}. {user}: {count} –∑–∞–ø–∏—Å–µ–π\n"
            text += "\n"
            
            # –¢–û–ü –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É–±—ã—Ç–∏—è
            if locations_count:
                text += "üìç **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ —É–±—ã—Ç–∏—è:**\n"
                sorted_locations = sorted(locations_count.items(), key=lambda x: x[1], reverse=True)[:5]
                for i, (location, count) in enumerate(sorted_locations, 1):
                    text += f"{i}. {location}: {count} —Ä–∞–∑\n"
        
        keyboard = [
            [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_journal_export")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_journal")]
        ]
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ journal_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "admin_journal_export")
async def callback_journal_export(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞ –≤ Excel"""
    user_id = callback.from_user.id

    if not await is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    try:
        filename = db.export_to_excel(days=30)
        if filename:
            from aiogram.types import FSInputFile
            document = FSInputFile(filename, filename="journal_export.xlsx")
            await callback.message.answer_document(
                document,
                caption="üì§ **–≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞** –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
                parse_mode="Markdown"
            )
            await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∂—É—Ä–Ω–∞–ª–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ", show_alert=True)

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = message.from_user.id

    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    try:
        current_status = db.get_current_status()
        
        text = "üìä **–ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞**\n\n"
        text += f"üë• –í—Å–µ–≥–æ –±–æ–π—Ü–æ–≤: {current_status['total']}\n"
        text += f"‚úÖ –í —á–∞—Å—Ç–∏: {current_status['present']}\n"
        text += f"‚ùå –í–Ω–µ —á–∞—Å—Ç–∏: {current_status['absent']}\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        if current_status.get('location_groups'):
            text += "üìç **–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º:**\n\n"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö, –∫—Ç–æ –≤ —á–∞—Å—Ç–∏
            if '–í —á–∞—Å—Ç–∏' in current_status['location_groups']:
                group = current_status['location_groups']['–í —á–∞—Å—Ç–∏']
                text += f"üü¢ **–í —á–∞—Å—Ç–∏: {group['count']}**\n"
                for name in group['names'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                    text += f"‚Ä¢ {name}\n"
                if len(group['names']) > 10:
                    text += f"... –∏ –µ—â–µ {len(group['names']) - 10}\n"
                text += "\n"
            
            # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
            for location, group in current_status['location_groups'].items():
                if location != '–í —á–∞—Å—Ç–∏':
                    text += f"üî¥ **{location}: {group['count']}**\n"
                    for name in group['names'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ª–æ–∫–∞—Ü–∏–π
                        text += f"‚Ä¢ {name}\n"
                    if len(group['names']) > 5:
                        text += f"... –∏ –µ—â–µ {len(group['names']) - 5}\n"
                    text += "\n"
        
        if current_status['total'] == 0:
            text += "‚ÑπÔ∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–π—Ü–æ–≤"
        
        keyboard = [
            [InlineKeyboardButton(text="üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
