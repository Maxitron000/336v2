
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.db_service import DBService
from config import LOCATIONS, MAIN_ADMIN_ID
from keyboards import get_main_menu_keyboard, get_location_keyboard, get_back_keyboard
import logging

router = Router()

class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_comment = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = await DBService.get_user(message.from_user.id)
        if user:
            is_admin = user['is_admin'] or message.from_user.id == MAIN_ADMIN_ID
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user['full_name']}!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(is_admin)
            )
        else:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –≤–æ–µ–Ω–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è!\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
            )
            await state.set_state(UserStates.waiting_for_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(UserStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        full_name = message.text.strip()
        if len(full_name) < 3:
            await message.answer("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        success = await DBService.add_user(
            message.from_user.id,
            message.from_user.username or "",
            full_name
        )
        
        if success:
            await message.answer(
                f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {full_name}!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(False)
            )
            await state.clear()
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_name: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await DBService.get_user(message.from_user.id)
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        records = await DBService.get_user_records(message.from_user.id, 5)
        
        profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {user['full_name']}\n"
        profile_text += f"üÜî ID: {user['id']}\n"
        profile_text += f"üõ°Ô∏è –ê–¥–º–∏–Ω: {'–î–∞' if user['is_admin'] else '–ù–µ—Ç'}\n\n"
        
        if records:
            profile_text += "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
            for record in records:
                action_emoji = "üü¢" if record['action'] == '–ø—Ä–∏–±—ã–ª' else "üî¥"
                profile_text += f"{action_emoji} {record['action']} - {record['location']}\n"
                profile_text += f"   {record['timestamp']}\n"
        else:
            profile_text += "üìã –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
        
        await message.answer(profile_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_profile: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é.
    """
    await message.answer(help_text)

@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user = await DBService.get_user(callback.from_user.id)
        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        is_admin = user['is_admin'] or callback.from_user.id == MAIN_ADMIN_ID
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(is_admin)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_main_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("action_"))
async def callback_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–±—ã–ª/–ø—Ä–∏–±—ã–ª"""
    try:
        action = callback.data.split("_")[1]
        action_text = "—É–±—ã–ª" if action == "leave" else "–ø—Ä–∏–±—ã–ª"
        
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {action_text}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=get_location_keyboard(action)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_action: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("location_"))
async def callback_location(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        data_parts = callback.data.split("_", 2)
        action = data_parts[1]
        location = data_parts[2]
        
        action_text = "—É–±—ã–ª" if action == "leave" else "–ø—Ä–∏–±—ã–ª"
        
        success = await DBService.add_record(
            callback.from_user.id,
            action_text,
            location
        )
        
        if success:
            user = await DBService.get_user(callback.from_user.id)
            is_admin = user['is_admin'] or callback.from_user.id == MAIN_ADMIN_ID
            
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"üö∂ {action_text} - {location}\n"
                f"üïí –í—Ä–µ–º—è: {callback.message.date.strftime('%H:%M')}",
                reply_markup=get_main_menu_keyboard(is_admin)
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏",
                reply_markup=get_back_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_location: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "show_journal")
async def callback_show_journal(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        records = await DBService.get_user_records(callback.from_user.id, 5)
        
        if not records:
            text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª –ø—É—Å—Ç.\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
        else:
            text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π):\n\n"
            for record in records:
                action_emoji = "üö∂" if record['action'] == '—É–±—ã–ª' else "üè†"
                text += f"{action_emoji} {record['action']} - {record['location']}\n"
                text += f"üïí {record['timestamp']}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_show_journal: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
