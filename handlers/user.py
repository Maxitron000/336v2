import re
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.db_service import DatabaseService
from config import MAIN_ADMIN_ID, LOCATIONS
from datetime import datetime
import logging

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_custom_location = State()
    showing_duplicate_action_warning = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseService()

def get_main_menu_keyboard(is_admin: bool = False):
    """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚ùå –£–±—ã–ª", callback_data="action_leave"),
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–±—ã–ª", callback_data="action_arrive")
        ],
        [InlineKeyboardButton(text="üìã –ú–æ–π –∂—É—Ä–Ω–∞–ª", callback_data="show_journal")]
    ]

    if is_admin:
        keyboard.append([InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_location_keyboard(action: str):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–æ–∫–∞—Ü–∏–π"""
    keyboard = []

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∫—Ä–æ–º–µ "–î—Ä—É–≥–æ–µ"
    locations_to_show = [loc for loc in LOCATIONS if loc != "üìù –î—Ä—É–≥–æ–µ"]

    for i in range(0, len(locations_to_show), 2):
        row = []
        for j in range(i, min(i + 2, len(locations_to_show))):
            location = locations_to_show[j]
            row.append(InlineKeyboardButton(
                text=location,
                callback_data=f"location_{action}_{location}"
            ))
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ" —Ç–æ–ª—å–∫–æ –¥–ª—è —É–±—ã–ª–∏
    if action == "—É–±—ã–ª":
        keyboard.append([InlineKeyboardButton(text="üìù –î—Ä—É–≥–æ–µ", callback_data=f"location_{action}_üìù –î—Ä—É–≥–æ–µ")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_journal_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∂—É—Ä–Ω–∞–ª–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    from aiogram.types import ReplyKeyboardRemove

    user = message.from_user
    user_id = user.id
    username = user.username or f"user_{user_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = db.get_user(user_id)

    if not existing_user:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
        await state.set_state(UserStates.waiting_for_name)
        await message.answer(
            "üéñÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è!\n\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–§–∞–º–∏–ª–∏—è –ò.–û.\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
    await message.answer(
        "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(is_admin)
    )

@router.message(StateFilter(UserStates.waiting_for_name))
async def handle_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    try:
        user = message.from_user
        user_id = user.id
        username = user.username or f"user_{user_id}"
        full_name = message.text.strip() if message.text else ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not full_name:
            await message.answer(
                "‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò.–û.\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)
        if len(full_name) < 3 or len(full_name) > 50:
            await message.answer(
                "‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
                f"–í–≤–µ–¥–µ–Ω–æ: {len(full_name)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if any(char in full_name for char in ['<', '>', '&', '"', "'", '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']):
            await message.answer(
                "‚ùå –§–ò–û –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã: < > & \" '\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò.–û.\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û
        if not re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$', full_name):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û!\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò.–û.\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.\n\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ –§–∞–º–∏–ª–∏—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã\n"
                "‚Ä¢ –ü—Ä–æ–±–µ–ª\n"
                "‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª—ã —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = db.get_user(user_id)
        if existing_user:
            await state.clear()
            await message.answer(
                f"‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: {existing_user['full_name']}\n"
                "–î–ª—è —Å–º–µ–Ω—ã –§–ò–û –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
            await message.answer(
                "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(is_admin)
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if db.add_user(user_id, username, full_name):
            await state.clear()
            is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
            await message.answer(
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!"
            )
            await message.answer(
                "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(is_admin)
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_name_input: {e}")
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

@router.message(StateFilter(UserStates.waiting_for_custom_location))
async def handle_custom_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        custom_location = message.text.strip() if message.text else ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not custom_location:
            await message.answer(
                "‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ (–æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(custom_location) < 2 or len(custom_location) > 50:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–°–µ–π—á–∞—Å: {len(custom_location)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if any(char in custom_location for char in ['<', '>', '&', '"', "'", '\n', '\r', '\t']):
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã: < > & \" ' –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã
        if custom_location.isspace() or custom_location.isdigit():
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ —Ü–∏—Ñ—Ä\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = await state.get_data()
        action = user_data.get('action', '—É–±—ã–ª')
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not db.get_user(user_id):
            await state.clear()
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        # –î–ª—è —É–±—ã–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–µ –≤ —á–∞—Å—Ç–∏"
        if action == "—É–±—ã–ª":
            action = "–Ω–µ –≤ —á–∞—Å—Ç–∏"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if db.add_record(user_id, action, custom_location):
            await state.clear()

            status_text = "–Ω–µ –≤ —á–∞—Å—Ç–∏" if action == "–Ω–µ –≤ —á–∞—Å—Ç–∏" else "–≤ —á–∞—Å—Ç–∏"
            await message.answer(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"üìç –°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"üè† –õ–æ–∫–∞—Ü–∏—è: {custom_location}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

            is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
            await message.answer(
                "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(is_admin)
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –ü–û–°–õ–ï –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await send_admin_notification(message.bot, user_id, action, custom_location)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_custom_location: {e}")
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    await state.clear()

    await callback.message.edit_text(
        "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(is_admin)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("action_"))
async def callback_action_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not db.get_user(user_id):
            await callback.message.edit_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            await callback.answer()
            return

        if "arrive" in callback.data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_records = db.get_user_records(user_id, 1)
            if last_records and last_records[0]['action'] == "–≤ —á–∞—Å—Ç–∏":
                await state.set_state(UserStates.showing_duplicate_action_warning)
                last_time = datetime.fromisoformat(last_records[0]['timestamp'].replace('Z', '+00:00')).strftime('%d.%m.%Y –≤ %H:%M')

                keyboard = [
                    [InlineKeyboardButton(text="üîô –ü–æ–Ω—è—Ç–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

                await callback.message.edit_text(
                    "‚ö†Ô∏è **–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–∏–±—ã—Ç–∏–∏**\n\n"
                    "–í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ **–Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ —á–∞—Å—Ç–∏**\n"
                    f"üìç –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: **{last_records[0]['location']}**\n"
                    f"‚è∞ –í—Ä–µ–º—è –æ—Ç–º–µ—Ç–∫–∏: {last_time}\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:**\n"
                    "1Ô∏è‚É£ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–π—Ç–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –£–±—ã–ª¬ª\n"
                    "2Ô∏è‚É£ –ï—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                await callback.answer()
                return

            # –î–ª—è "–ü—Ä–∏–±—ã–ª" —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å "–≤ —á–∞—Å—Ç–∏"
            action = "–≤ —á–∞—Å—Ç–∏"
            location = "–ß–∞—Å—Ç—å"

            if db.add_record(user_id, action, location):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
                await callback.message.answer(
                    f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                    f"üìç –í—ã –≤ —á–∞—Å—Ç–∏\n"
                    f"‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É –≤–Ω–∏–∑—É
                is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
                await callback.message.answer(
                    "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_main_menu_keyboard(is_admin)
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –ü–û–°–õ–ï –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                await send_admin_notification(callback.message.bot, user_id, action, location)

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                try:
                    await callback.message.delete()
                except:
                    pass
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è "—É–±—ã–ª"
            last_records = db.get_user_records(user_id, 1)
            if last_records and last_records[0]['action'] == "–Ω–µ –≤ —á–∞—Å—Ç–∏":
                await state.set_state(UserStates.showing_duplicate_action_warning)
                last_time = datetime.fromisoformat(last_records[0]['timestamp'].replace('Z', '+00:00')).strftime('%d.%m.%Y –≤ %H:%M')

                keyboard = [
                    [InlineKeyboardButton(text="üîô –ü–æ–Ω—è—Ç–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

                await callback.message.edit_text(
                    "‚ö†Ô∏è **–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –æ–± —É–±—ã—Ç–∏–∏**\n\n"
                    "–í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ **–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π**\n"
                    f"üìç –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: **{last_records[0]['location']}**\n"
                    f"‚è∞ –í—Ä–µ–º—è –æ—Ç–º–µ—Ç–∫–∏: {last_time}\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:**\n"
                    "1Ô∏è‚É£ –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–∏–±—ã–ª¬ª\n"
                    "2Ô∏è‚É£ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–±—É–¥—å—Ç–µ, –∑–∞—Ç–µ–º —É–±—É–¥—å—Ç–µ –∑–∞–Ω–æ–≤–æ\n"
                    "3Ô∏è‚É£ –ï—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                await callback.answer()
                return

            # –î–ª—è "–£–±—ã–ª" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–π
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –∫—É–¥–∞ –≤—ã —É–±—ã–ª–∏:",
                reply_markup=get_location_keyboard("—É–±—ã–ª")
            )

        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_action_selection: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.callback_query(F.data.startswith("location_"))
async def callback_location_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        parts = callback.data.split("_", 2)
        if len(parts) < 3:
            await callback.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            await callback.answer()
            return

        action = parts[1]
        location = parts[2]
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not db.get_user(user_id):
            await callback.message.edit_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            await callback.answer()
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        if action not in ["—É–±—ã–ª", "–ø—Ä–∏–±—ã–ª"]:
            await callback.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            await callback.answer()
            return

        if location == "üìù –î—Ä—É–≥–æ–µ":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
            await state.set_state(UserStates.waiting_for_custom_location)
            await state.update_data(action=action)

            await callback.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –î–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä\n"
                "‚Ä¢ –ö–∞—Ñ–µ\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):"
            )
            await callback.answer()
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–∏
        if not location or len(location.strip()) < 1 or len(location.strip()) > 50:
            await callback.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            await callback.answer()
            return

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        if any(char in location for char in ['<', '>', '&', '"', "'", '\n', '\r', '\t']):
            await callback.message.edit_text("‚ùå –õ–æ–∫–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
            await callback.answer()
            return

        # –î–ª—è —É–±—ã–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–µ –≤ —á–∞—Å—Ç–∏"
        if action == "—É–±—ã–ª":
            action = "–Ω–µ –≤ —á–∞—Å—Ç–∏"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if db.add_record(user_id, action, location):
            status_text = "–Ω–µ –≤ —á–∞—Å—Ç–∏" if action == "–Ω–µ –≤ —á–∞—Å—Ç–∏" else "–≤ —á–∞—Å—Ç–∏"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            await callback.message.answer(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"üìç –°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"üè† –õ–æ–∫–∞—Ü–∏—è: {location}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É –≤–Ω–∏–∑—É
            is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
            await callback.message.answer(
                "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(is_admin)
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –ü–û–°–õ–ï –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await send_admin_notification(callback.message.bot, user_id, action, location)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                await callback.message.delete()
            except:
                pass
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_location_selection: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.message(Command("journal"))
async def cmd_journal(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /journal - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∂—É—Ä–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not db.get_user(user_id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        records = db.get_user_records(user_id, limit=10)

        if not records:
            await message.answer(
                "üìã **–ú–æ–π –∂—É—Ä–Ω–∞–ª**\n\n"
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ.\n"
                "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∏–ª–∏ —É–±—ã—Ç–∏–∏!",
                parse_mode="Markdown"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –∂—É—Ä–Ω–∞–ª–∞
        text = "üìã **–ú–æ–π –∂—É—Ä–Ω–∞–ª**\n"
        text += "‚îÄ" * 25 + "\n\n"

        for i, record in enumerate(records, 1):
            timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
            formatted_date = timestamp.strftime('%d.%m.%Y')
            formatted_time = timestamp.strftime('%H:%M')

            if record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
                action_emoji = "üö∂"
                action_text = "**—É–±—ã–ª**"
                status_color = "üî¥"
            else:
                action_emoji = "üè†"
                action_text = "**–ø—Ä–∏–±—ã–ª**"
                status_color = "üü¢"

            text += f"{status_color} {i}. {action_emoji} {action_text}\n"
            text += f"üìç {record['location']}\n"
            text += f"üìÖ {formatted_date} –≤ {formatted_time}\n"

            if i < len(records):
                text += "‚îÄ" * 20 + "\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        last_record = records[0]
        if last_record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
            current_status = "üî¥ **–£–±—ã–ª (–Ω–µ –≤ —á–∞—Å—Ç–∏)**"
        else:
            current_status = "üü¢ **–ü—Ä–∏–±—ã–ª (–≤ —á–∞—Å—Ç–∏)**"

        text += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}\n"
        text += f"üìç –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–æ–∫–∞—Ü–∏—è: {last_record['location']}"

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(text, reply_markup=reply_markup, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –£–±–∏—Ä–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∂—É—Ä–Ω–∞–ª–∞ - –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π

@router.callback_query(F.data == "show_journal")
async def callback_show_journal(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.get_user(user_id)
        if not user:
            await callback.message.edit_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        records = db.get_user_records(user_id, limit=10)

        if not records:
            await callback.message.edit_text(
                "üìã **–ú–æ–π –∂—É—Ä–Ω–∞–ª**\n\n"
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ.\n"
                "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∏–ª–∏ —É–±—ã—Ç–∏–∏!",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –∂—É—Ä–Ω–∞–ª–∞
        text = "üìã **–ú–æ–π –∂—É—Ä–Ω–∞–ª**\n"
        text += "‚îÄ" * 25 + "\n\n"

        for i, record in enumerate(records, 1):
            timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
            formatted_date = timestamp.strftime('%d.%m.%Y')
            formatted_time = timestamp.strftime('%H:%M')

            if record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
                action_emoji = "üö∂"
                action_text = "**—É–±—ã–ª**"
                status_color = "üî¥"
            else:
                action_emoji = "üè†"
                action_text = "**–ø—Ä–∏–±—ã–ª**"
                status_color = "üü¢"

            text += f"{status_color} {i}. {action_emoji} {action_text}\n"
            text += f"üìç {record['location']}\n"
            text += f"üìÖ {formatted_date} –≤ {formatted_time}\n"

            if i < len(records):
                text += "‚îÄ" * 20 + "\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        last_record = records[0]
        if last_record['action'] == '–Ω–µ –≤ —á–∞—Å—Ç–∏':
            current_status = "üî¥ **–£–±—ã–ª (–Ω–µ –≤ —á–∞—Å—Ç–∏)**"
        else:
            current_status = "üü¢ **–ü—Ä–∏–±—ã–ª (–≤ —á–∞—Å—Ç–∏)**"

        text += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}\n"
        text += f"üìç –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–æ–∫–∞—Ü–∏—è: {last_record['location']}"

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_show_journal: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂—É—Ä–Ω–∞–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        await callback.answer()

async def show_user_journal_page(callback: CallbackQuery, user_id: int, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∂—É—Ä–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        per_page = 5
        offset = (page - 1) * per_page

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        all_records = db.get_user_records(user_id, 1000)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        total_records = len(all_records)
        total_pages = (total_records + per_page - 1) // per_page if total_records > 0 else 1

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        records = db.get_user_records(user_id, per_page)
        if offset > 0:
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±–µ—Ä–µ–º –Ω—É–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            records = all_records[offset:offset + per_page]

        if not records:
            text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª –ø—É—Å—Ç.\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n–û—Ç–º–µ—Ç—å—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
            keyboard = get_journal_keyboard()
        else:
            text = f"üìã –í–∞—à –∂—É—Ä–Ω–∞–ª (—Å—Ç—Ä. {page}/{total_pages}):\n\n"
            for i, record in enumerate(records, 1):
                try:
                    timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                    formatted_time = timestamp.strftime('%d.%m %H:%M')

                    if record['action'] == "–Ω–µ –≤ —á–∞—Å—Ç–∏":
                        action_emoji = "üî¥"
                        action_text = "–Ω–µ –≤ —á–∞—Å—Ç–∏"
                    elif record['action'] == "–≤ —á–∞—Å—Ç–∏":
                        action_emoji = "üü¢"
                        action_text = "–≤ —á–∞—Å—Ç–∏"
                    else:
                        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                        action_emoji = "üî¥" if "—É–±—ã–ª" in record['action'] else "üü¢"
                        action_text = record['action']

                    location = record['location'][:25] + "..." if len(record['location']) > 25 else record['location']
                    text += f"{i + offset}. {action_emoji} {action_text}\n"
                    text += f"üìç {location}\n"
                    text += f"‚è∞ {formatted_time}\n\n"
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
                    continue

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            keyboard = get_journal_keyboard_with_pagination(page, total_pages)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_user_journal_page: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂—É—Ä–Ω–∞–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_journal_keyboard()
        )

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_last_action = {}

def can_user_make_action(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)"""
    now = datetime.now()
    if user_id in user_last_action:
        last_action_time = user_last_action[user_id]
        if (now - last_action_time).total_seconds() < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            return False
    return True

def update_user_last_action(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_last_action[user_id] = datetime.now()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∂—É—Ä–Ω–∞–ª–∞
# @router.callback_query(F.data.startswith("journal_page_"))
# async def callback_journal_pagination(callback: CallbackQuery):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∂—É—Ä–Ω–∞–ª–∞"""
#     try:
#         page = int(callback.data.split("_")[-1])
#         user_id = callback.from_user.id

#         await show_user_journal_page(callback, user_id, page)
#         await callback.answer()
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ journal_pagination: {e}")
#         await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º")

@router.callback_query(F.data.startswith("locations_page_"))
async def callback_locations_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–π"""
    try:
        parts = callback.data.split("_")
        action = parts[2]
        page = int(parts[3])

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –∫—É–¥–∞ –≤—ã —É–±—ã–ª–∏:",
            reply_markup=get_location_keyboard_with_pagination(action, page)
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ locations_pagination: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º")

@router.callback_query(F.data.in_(["journal_info", "locations_info"]))
async def callback_pagination_info(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
        if not can_user_make_action(user_id):
            return

        update_user_last_action(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.get_user(user_id)
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
        else:
            await message.answer(
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
                "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_unknown_message: {e}")

async def send_admin_notification(bot, user_id: int, action: str, location: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = db.get_user(user_id)
        if not user:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞.")
            return

        full_name = user['full_name']
        timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')

        if action == "–≤ —á–∞—Å—Ç–∏":
            message = f"‚úÖ [{timestamp}] –ë–æ–µ—Ü {full_name} –ø—Ä–∏–±—ã–ª –≤ —á–∞—Å—Ç—å."
        elif action == "–Ω–µ –≤ —á–∞—Å—Ç–∏":
            message = f"‚ùå [{timestamp}] –ë–æ–µ—Ü {full_name} —É–±—ã–ª –∏–∑ —á–∞—Å—Ç–∏. –õ–æ–∫–∞—Ü–∏—è: {location}"
        else:
            message = f"‚ÑπÔ∏è [{timestamp}] –ë–æ–µ—Ü {full_name} —Å–æ–≤–µ—Ä—à–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}. –õ–æ–∫–∞—Ü–∏—è: {location}"

        await bot.send_message(MAIN_ADMIN_ID, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@router.callback_query(F.data == "action_arrived")
async def callback_arrived(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–±—ã–ª' - —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —á–∞—Å—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.get_user(user_id)
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    last_records = db.get_user_records(user_id, 1)
    if last_records and last_records[0]['action'] == "–ø—Ä–∏–±—ã–ª":
        await state.set_state(UserStates.showing_duplicate_action_warning)
        last_time = datetime.fromisoformat(last_records[0]['timestamp'].replace('Z', '+00:00')).strftime('%d.%m.%Y –≤ %H:%M')

        keyboard = [
            [InlineKeyboardButton(text="üîô –ü–æ–Ω—è—Ç–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await callback.message.edit_text(
            "‚ö†Ô∏è **–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–∏–±—ã—Ç–∏–∏**\n\n"
            "–í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ **–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≤ —á–∞—Å—Ç–∏**\n"
            f"‚è∞ –í—Ä–µ–º—è –æ—Ç–º–µ—Ç–∫–∏: {last_time}\n\n"
            "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:**\n"
            "1Ô∏è‚É£ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–±—ã—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –£–±—ã–ª¬ª\n"
            "2Ô∏è‚É£ –ï—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    # –°—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–±—ã—Ç–∏–µ –≤ —á–∞—Å—Ç—å
    if db.add_record(user_id, "–ø—Ä–∏–±—ã–ª", "–í —á–∞—Å—Ç–∏"):
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        current_time = datetime.now().strftime('%H:%M')

        keyboard = [
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="show_journal")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await callback.message.edit_text(
            f"‚úÖ **–ü—Ä–∏–±—ã—Ç–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!**\n\n"
            f"üë§ **–ë–æ–µ—Ü:** {user['full_name']}\n"
            f"üè† **–°—Ç–∞—Ç—É—Å:** –í —á–∞—Å—Ç–∏\n"
            f"‚è∞ **–í—Ä–µ–º—è:** {current_time}\n\n"
            f"üìù –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏", show_alert=True)

    await callback.answer()