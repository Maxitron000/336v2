import re
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.db_service import DatabaseService
from config import MAIN_ADMIN_ID, LOCATIONS
from datetime import datetime
import logging

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_custom_location = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseService()

def get_main_menu_keyboard(is_admin: bool = False):
    """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚ùå –£–±—ã–ª", callback_data="action_leave"),
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–±—ã–ª", callback_data="action_arrive")
        ],
        [InlineKeyboardButton(text="üìã –ú–æ–π –∂—É—Ä–Ω–∞–ª", callback_data="show_journal")]
    ]

    if is_admin:
        keyboard.append([InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_location_keyboard(action: str):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–æ–∫–∞—Ü–∏–π"""
    keyboard = []
    for i in range(0, len(LOCATIONS), 2):
        row = []
        for j in range(i, min(i + 2, len(LOCATIONS))):
            location = LOCATIONS[j]
            row.append(InlineKeyboardButton(
                text=location,
                callback_data=f"location_{action}_{location}"
            ))
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_journal_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∂—É—Ä–Ω–∞–ª–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    user_id = user.id
    username = user.username or f"user_{user_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = db.get_user(user_id)

    if not existing_user:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
        await state.set_state(UserStates.waiting_for_name)
        await message.answer(
            "üéñÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è!\n\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–§–∞–º–∏–ª–∏—è –ò.–û.\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò."
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
    await message.answer(
        "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(is_admin)
    )

@router.message(StateFilter(UserStates.waiting_for_name))
async def handle_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    user = message.from_user
    user_id = user.id
    username = user.username or f"user_{user_id}"
    full_name = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û
    if not re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$', full_name):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û!\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò.–û.\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if db.add_user(user_id, username, full_name):
        await state.clear()
        is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!"
        )
        await message.answer(
            "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(is_admin)
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(StateFilter(UserStates.waiting_for_custom_location))
async def handle_custom_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    custom_location = message.text.strip()

    if len(custom_location) < 3 or len(custom_location) > 50:
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    action = user_data.get('action')
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    if db.add_record(user_id, action, custom_location):
        await state.clear()

        action_text = "—É–±—ã–ª" if action == "—É–±—ã–ª" else "–ø—Ä–∏–±—ã–ª"
        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n"
            f"–õ–æ–∫–∞—Ü–∏—è: {custom_location}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

        is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
        await message.answer(
            "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(is_admin)
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")

@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID

    await callback.message.edit_text(
        "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(is_admin)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("action_"))
async def callback_action_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    user_id = callback.from_user.id

    if "arrive" in callback.data:
        # –î–ª—è "–ü—Ä–∏–±—ã–ª" —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å "–≤ —á–∞—Å—Ç–∏"
        action = "–≤ —á–∞—Å—Ç–∏"
        location = "–ß–∞—Å—Ç—å"

        if db.add_record(user_id, action, location):
            await callback.message.edit_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"üìç –í—ã –≤ —á–∞—Å—Ç–∏\n"
                f"‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)
            is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
            await callback.message.edit_text(
                "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(is_admin)
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
    else:
        # –î–ª—è "–£–±—ã–ª" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–π
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –∫—É–¥–∞ –≤—ã —É–±—ã–ª–∏:",
            reply_markup=get_location_keyboard("—É–±—ã–ª")
        )

    await callback.answer()

@router.callback_query(F.data.startswith("location_"))
async def callback_location_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    parts = callback.data.split("_", 2)
    action = parts[1]
    location = parts[2]

    user_id = callback.from_user.id

    if location == "üìù –î—Ä—É–≥–æ–µ":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
        await state.set_state(UserStates.waiting_for_custom_location)
        await state.update_data(action=action)

        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –î–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä\n"
            "‚Ä¢ –ö–∞—Ñ–µ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        await callback.answer()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    if db.add_record(user_id, action, location):
        action_text = "—É–±—ã–ª" if action == "—É–±—ã–ª" else "–ø—Ä–∏–±—ã–ª"
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n"
            f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(2)
        is_admin = db.is_admin(user_id) or user_id == MAIN_ADMIN_ID
        await callback.message.edit_text(
            "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(is_admin)
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")

    await callback.answer()

@router.callback_query(F.data == "show_journal")
async def callback_show_journal(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    records = db.get_user_records(user_id, 5)

    if not records:
        text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª –ø—É—Å—Ç.\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    else:
        text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π):\n\n"
        for record in records:
            timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
            formatted_time = timestamp.strftime('%d.%m %H:%M')
            action_emoji = "üî¥" if record['action'] == "—É–±—ã–ª" else "üü¢"
            text += f"{action_emoji} {record['action']} - {record['location']}\n"
            text += f"‚è∞ {formatted_time}\n\n"

    await callback.message.edit_text(text, reply_markup=get_journal_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")