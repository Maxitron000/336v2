
import asyncio
import logging
import psutil
import time
from datetime import datetime, timedelta
from typing import Dict, Any
from services.db_service import DatabaseService
import os

class SystemMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.db = DatabaseService()
        self.metrics = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'last_error': None,
            'uptime': 0,
            'memory_usage': 0,
            'cpu_usage': 0,
            'active_users': 0,
            'database_size': 0
        }
        
    def get_uptime(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        uptime = datetime.now() - self.start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        if days > 0:
            return f"{days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º {seconds}—Å"
    
    def get_system_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            process = psutil.Process()
            
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_size = 0
            if os.path.exists('military_tracker.db'):
                db_size = os.path.getsize('military_tracker.db') / (1024 * 1024)  # MB
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_count = len(self.db.get_all_users())
            records_count = len(self.db.get_all_records(days=1))
            
            self.metrics.update({
                'uptime': self.get_uptime(),
                'memory_usage': memory.percent,
                'memory_available': memory.available / (1024 * 1024 * 1024),  # GB
                'cpu_usage': cpu_percent,
                'process_memory': process.memory_info().rss / (1024 * 1024),  # MB
                'database_size': round(db_size, 2),
                'total_users': users_count,
                'records_today': records_count
            })
            
            return self.metrics
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            return self.metrics
    
    def increment_request(self, success: bool = True):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.metrics['total_requests'] += 1
        if success:
            self.metrics['successful_requests'] += 1
        else:
            self.metrics['failed_requests'] += 1
    
    def log_error(self, error: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.metrics['last_error'] = {
            'message': error,
            'timestamp': datetime.now().isoformat()
        }
        logging.error(f"System error: {error}")
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        metrics = self.get_system_metrics()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
        health_issues = []
        
        if metrics['memory_usage'] > 85:
            health_issues.append("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        
        if metrics['cpu_usage'] > 80:
            health_issues.append("–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU")
        
        if metrics['database_size'] > 100:  # –ë–æ–ª—å—à–µ 100 MB
            health_issues.append("–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        if self.metrics['last_error']:
            last_error_time = datetime.fromisoformat(self.metrics['last_error']['timestamp'])
            if (datetime.now() - last_error_time).total_seconds() < 300:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                health_issues.append("–ù–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ")
        
        status = "healthy" if not health_issues else "warning" if len(health_issues) < 3 else "critical"
        
        return {
            'status': status,
            'issues': health_issues,
            'metrics': metrics,
            'timestamp': datetime.now().isoformat()
        }
    
    async def cleanup_if_needed(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            metrics = self.get_system_metrics()
            
            # –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            if metrics['database_size'] > 50:  # –ë–æ–ª—å—à–µ 50 MB
                deleted = self.db.cleanup_old_records(days=90)
                logging.info(f"–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            
            # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
            if metrics['memory_usage'] > 80:
                self.db.optimize_database()
                logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
monitor = SystemMonitor()

class AdvancedLogger:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.setup_logging()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        if not os.path.exists('logs'):
            os.makedirs('logs')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        main_handler = logging.FileHandler('logs/bot.log', encoding='utf-8')
        main_handler.setFormatter(formatter)
        main_handler.setLevel(logging.INFO)
        
        # –õ–æ–≥ –æ—à–∏–±–æ–∫
        error_handler = logging.FileHandler('logs/errors.log', encoding='utf-8')
        error_handler.setFormatter(formatter)
        error_handler.setLevel(logging.ERROR)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        console_handler.setLevel(logging.WARNING)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ root logger
        root_logger = logging.getLogger()
        root_logger.setLevel(logging.INFO)
        root_logger.addHandler(main_handler)
        root_logger.addHandler(error_handler)
        root_logger.addHandler(console_handler)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
        logging.getLogger('aiogram').setLevel(logging.WARNING)
        logging.getLogger('httpx').setLevel(logging.WARNING)
    
    def log_user_action(self, user_id: int, action: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logging.info(f"USER_ACTION - ID:{user_id} - {action} - {details}")
    
    def log_admin_action(self, admin_id: int, action: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        logging.info(f"ADMIN_ACTION - ID:{admin_id} - {action} - {details}")
    
    def log_system_event(self, event: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        logging.info(f"SYSTEM_EVENT - {event} - {details}")
    
    def log_error_with_context(self, error: Exception, context: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        logging.error(f"ERROR - {context} - {type(error).__name__}: {str(error)}")
        monitor.log_error(f"{context}: {str(error)}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
advanced_logger = AdvancedLogger()

async def periodic_health_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    while True:
        try:
            health = monitor.get_health_status()
            
            if health['status'] == 'critical':
                advanced_logger.log_system_event(
                    "CRITICAL_HEALTH", 
                    f"Issues: {', '.join(health['issues'])}"
                )
            
            # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            await monitor.cleanup_if_needed()
            
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(300)
            
        except Exception as e:
            advanced_logger.log_error_with_context(e, "periodic_health_check")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ

def get_system_status() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    health = monitor.get_health_status()
    metrics = health['metrics']
    
    status_emoji = {
        'healthy': 'üü¢',
        'warning': 'üü°', 
        'critical': 'üî¥'
    }
    
    status_text = f"{status_emoji[health['status']]} **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {health['status'].upper()}**\n\n"
    
    status_text += f"‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {metrics['uptime']}\n"
    status_text += f"üíæ **–ü–∞–º—è—Ç—å:** {metrics['memory_usage']:.1f}% ({metrics['memory_available']:.1f} GB –¥–æ—Å—Ç—É–ø–Ω–æ)\n"
    status_text += f"üñ•Ô∏è **CPU:** {metrics['cpu_usage']:.1f}%\n"
    status_text += f"üóÉÔ∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** {metrics['database_size']} MB\n"
    status_text += f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {metrics['total_users']}\n"
    status_text += f"üìä **–ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è:** {metrics['records_today']}\n\n"
    
    status_text += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
    status_text += f"‚Ä¢ –í—Å–µ–≥–æ: {metrics['total_requests']}\n"
    status_text += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {metrics['successful_requests']}\n"
    status_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {metrics['failed_requests']}\n"
    
    if health['issues']:
        status_text += f"\n‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã:**\n"
        for issue in health['issues']:
            status_text += f"‚Ä¢ {issue}\n"
    
    if metrics.get('last_error'):
        last_error = metrics['last_error']
        error_time = datetime.fromisoformat(last_error['timestamp'])
        status_text += f"\nüö® **–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:**\n"
        status_text += f"‚Ä¢ {last_error['message']}\n"
        status_text += f"‚Ä¢ {error_time.strftime('%d.%m.%Y %H:%M:%S')}\n"
    
    return status_text
