import re
import json
import random
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import Database
from keyboards import *
from config import MAIN_ADMIN_ID

class Handlers:
    def __init__(self):
        self.db = Database()
        self.user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.notifications = self.load_notifications()
    
    def load_notifications(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            with open('notifications.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            # Fallback –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            return {
                "daily_summary": ["üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≥–æ—Ç–æ–≤–∞!"],
                "reminders": ["üîî –ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è!"],
                "new_record": ["üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ!"],
                "admin_notifications": ["üëë –ö–æ–º–∞–Ω–¥–∏—Ä, –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!"],
                "welcome_messages": ["üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"],
                "error_messages": ["‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!"],
                "success_messages": ["‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"]
            }
    
    def get_random_notification(self, category: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        notifications = self.notifications.get(category, [])
        if notifications:
            return random.choice(notifications)
        return "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        try:
            await update.message.delete()
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
        
        user = update.effective_user
        user_id = user.id
        username = user.username or f"user_{user_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = self.db.get_user(user_id)
        
        if not existing_user:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
            self.user_states[user_id] = {'state': 'waiting_for_name'}
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥!\n\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–§–∞–º–∏–ª–∏—è –ò.–û.\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò."
            )
            return
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        is_admin = self.db.is_admin(user_id)
        await self.show_main_menu(update, context, is_admin)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
            return
        
        state = self.user_states[user_id]['state']
        
        if state == 'waiting_for_name':
            await self.handle_name_input(update, context)
        elif state == 'waiting_for_custom_location':
            await self.handle_custom_location(update, context)
        elif state == 'waiting_for_admin_id':
            await self.handle_admin_id_input(update, context)
        elif state == 'waiting_for_new_name':
            # –°–º–µ–Ω–∞ –§–ò–û –±–æ–π—Ü–∞
            soldier_id = self.user_states[user_id]['soldier_id']
            new_name = update.message.text.strip()
            if not re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$', new_name):
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò.–û.\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            if self.db.update_user_full_name(soldier_id, new_name):
                await update.message.reply_text(f"‚úÖ –§–ò–û –±–æ–π—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            del self.user_states[user_id]
            is_admin = self.db.is_admin(user_id)
            await self.show_main_menu(update, context, is_admin)
        elif state == 'waiting_for_new_soldier_name':
            # –ó–∞–ø—Ä–æ—Å username –ø–æ—Å–ª–µ –§–ò–û
            new_name = update.message.text.strip()
            if not re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$', new_name):
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò.–û.\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            self.user_states[user_id] = {"state": "waiting_for_new_soldier_username", "new_name": new_name}
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞ (–±–µ–∑ @) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ:")
            return
        elif state == 'waiting_for_new_soldier_username':
            new_name = self.user_states[user_id]['new_name']
            username = update.message.text.strip()
            if username == '-':
                import random
                username = f"user_{random.randint(100000,999999)}"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ username
            soldiers, _, _ = self.db.get_users_list(page=1, per_page=10000)
            if any(s['username'] == username for s in soldiers):
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:")
                return
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π user_id (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–ª—Å—è —Å Telegram ID)
            import random
            temp_id = -random.randint(100000, 999999)
            if self.db.add_user(temp_id, username, new_name):
                await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π –±–æ–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω!\n–§–ò–û: {new_name}\nusername: {username}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ–π—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            del self.user_states[user_id]
            is_admin = self.db.is_admin(user_id)
            await self.show_main_menu(update, context, is_admin)
            return
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    
    async def handle_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
        user = update.effective_user
        user_id = user.id
        username = user.username or f"user_{user_id}"
        full_name = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û
        if not re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$', full_name):
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û!\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò.–û.\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.db.add_user(user_id, username, full_name):
            del self.user_states[user_id]
            is_admin = self.db.is_admin(user_id)
            welcome_text = self.get_random_notification("welcome_messages")
            await update.message.reply_text(
                f"{welcome_text}\n\n"
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!"
            )
            await self.show_main_menu(update, context, is_admin)
        else:
            error_text = self.get_random_notification("error_messages")
            await update.message.reply_text(
                f"{error_text}\n\n"
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def handle_custom_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        custom_location = update.message.text.strip()
        
        if len(custom_location) < 3 or len(custom_location) > 50:
            await update.message.reply_text(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        state_data = self.user_states[user_id]
        action = state_data['action']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if self.db.add_record(user_id, action, custom_location):
            del self.user_states[user_id]
            
            action_text = "—É–±—ã–ª" if action == "—É–±—ã–ª" else "–ø—Ä–∏–±—ã–ª"
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"–î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n"
                f"–õ–æ–∫–∞—Ü–∏—è: {custom_location}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if MAIN_ADMIN_ID:
                user = self.db.get_user(user_id)
                notification_text = self.get_random_notification("admin_notifications")
                await context.bot.send_message(
                    MAIN_ADMIN_ID,
                    f"{notification_text}\n\n"
                    f"üë§ –ë–æ–µ—Ü: {user['full_name']}\n"
                    f"üéØ –î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n"
                    f"üìç –õ–æ–∫–∞—Ü–∏—è: {custom_location}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}"
                )
            
            is_admin = self.db.is_admin(user_id)
            await self.show_main_menu(update, context, is_admin, query)
        else:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        user = self.db.get_user(user_id)
        if not user:
            await query.edit_message_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start"
            )
            return
        
        is_admin = self.db.is_admin(user_id)
        is_main_admin = self.db.is_main_admin(user_id)
        
        if data == "main_menu":
            await self.show_main_menu(update, context, is_admin, query)
        
        elif data.startswith("action_"):
            await self.handle_action_selection(update, context, query, data)
        
        elif data.startswith("location_"):
            await self.handle_location_selection(update, context, query, data)
        
        elif data == "show_journal":
            await self.show_journal(update, context, query)
        
        elif data.startswith("journal_"):
            await self.handle_journal_expansion(update, context, query, data)
        
        elif data == "admin_panel":
            await self.show_admin_panel(update, context, query, is_main_admin)
        
        elif data.startswith("admin_"):
            await self.handle_admin_actions(update, context, query, data, is_main_admin)
        elif data.startswith("personnel_"):
            await self.handle_personnel_actions(update, context, query, data, is_main_admin)
        elif data.startswith("journal_"):
            await self.handle_journal_actions(update, context, query, data, is_main_admin)
        elif data.startswith("settings_"):
            await self.handle_settings_actions(update, context, query, data, is_main_admin)
        elif data.startswith("danger_"):
            await self.handle_danger_actions(update, context, query, data, is_main_admin)
        elif data.startswith("notif_"):
            await self.handle_notification_actions(update, context, query, data, is_main_admin)
        elif data.startswith("remove_admin_"):
            await self.handle_remove_admin(update, context, query, data)
        elif data.startswith("confirm_"):
            await self.handle_confirmation(update, context, query, data)
        
        elif data == "cancel":
            await self.show_main_menu(update, context, is_admin, query)
        elif data.startswith("editname_"):
            soldier_id = int(data.split("_")[1])
            self.user_states[user_id] = {"state": "waiting_for_new_name", "soldier_id": soldier_id}
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –¥–ª—è –±–æ–π—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò.–û.\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.",
                reply_markup=get_back_keyboard("admin_personnel")
            )
            return
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           is_admin: bool, query=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = get_main_menu_keyboard(is_admin)
        text = "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if query:
            await query.edit_message_text(text, reply_markup=keyboard)
        else:
            await update.message.reply_text(text, reply_markup=keyboard)
    
    async def handle_action_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (—É–±—ã–ª/–ø—Ä–∏–±—ã–ª)"""
        action = "—É–±—ã–ª" if "leave" in data else "–ø—Ä–∏–±—ã–ª"
        keyboard = get_location_keyboard(action)
        
        action_text = "—É–±—ã–ª" if action == "—É–±—ã–ª" else "–ø—Ä–∏–±—ã–ª"
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ —Ç–æ–º, —á—Ç–æ –≤—ã {action_text}:"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def handle_location_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        parts = data.split("_", 2)
        action = parts[1]
        location = parts[2]
        
        user_id = update.effective_user.id
        
        if location == "üìù –î—Ä—É–≥–æ–µ":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
            self.user_states[user_id] = {
                'state': 'waiting_for_custom_location',
                'action': action
            }
            
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –î–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä\n"
                "‚Ä¢ –ö–∞—Ñ–µ\n"
                "‚Ä¢ –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if self.db.add_record(user_id, action, location):
            action_text = "—É–±—ã–ª" if action == "—É–±—ã–ª" else "–ø—Ä–∏–±—ã–ª"
            await query.edit_message_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"–î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n"
                f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if MAIN_ADMIN_ID:
                user = self.db.get_user(user_id)
                notification_text = self.get_random_notification("admin_notifications")
                await context.bot.send_message(
                    MAIN_ADMIN_ID,
                    f"{notification_text}\n\n"
                    f"üë§ –ë–æ–µ—Ü: {user['full_name']}\n"
                    f"üéØ –î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n"
                    f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}"
                )
            
            is_admin = self.db.is_admin(user_id)
            await self.show_main_menu(update, context, is_admin, query)
        else:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_keyboard()
            )
    
    async def show_journal(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        records = self.db.get_user_records(user_id, 3)
        
        if not records:
            text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª –ø—É—Å—Ç.\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤—ã—Ö–æ–¥–µ –∏ –ø—Ä–∏—Ö–æ–¥–µ."
        else:
            text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏):\n\n"
            for record in records:
                timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                formatted_time = timestamp.strftime('%d.%m.%Y %H:%M')
                action_emoji = "üö∂" if record['action'] == "—É–±—ã–ª" else "üè†"
                text += f"{action_emoji} {record['action'].title()} - {record['location']}\n"
                text += f"‚è∞ {formatted_time}\n\n"
        
        keyboard = get_journal_keyboard(expanded=False)
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def handle_journal_expansion(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞"""
        user_id = update.effective_user.id
        expanded = "expand" in data
        
        limit = 10 if expanded else 3
        records = self.db.get_user_records(user_id, limit)
        
        if not records:
            text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª –ø—É—Å—Ç.\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤—ã—Ö–æ–¥–µ –∏ –ø—Ä–∏—Ö–æ–¥–µ."
        else:
            text = f"üìã –í–∞—à –∂—É—Ä–Ω–∞–ª (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(records)} –∑–∞–ø–∏—Å–µ–π):\n\n"
            for record in records:
                timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                formatted_time = timestamp.strftime('%d.%m.%Y %H:%M')
                action_emoji = "üö∂" if record['action'] == "—É–±—ã–ª" else "üè†"
                text += f"{action_emoji} {record['action'].title()} - {record['location']}\n"
                text += f"‚è∞ {formatted_time}\n\n"
        
        keyboard = get_journal_keyboard(expanded=expanded)
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             query, is_main_admin: bool):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        keyboard = get_admin_panel_keyboard(is_main_admin)
        text = "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_admin_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—É—é —Å–≤–æ–¥–∫—É"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
        away_soldiers = self.db.get_soldiers_by_status("–≤–Ω–µ_—á–∞—Å—Ç–∏")
        
        if not away_soldiers:
            text = "üìä –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞\n\n‚úÖ –í—Å–µ –±–æ–π—Ü—ã –≤ —á–∞—Å—Ç–∏!"
        else:
            text = "üìä –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞\n\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –±–æ–π—Ü—ã:\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
            locations = {}
            for soldier in away_soldiers:
                location = soldier.get('last_location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                if location not in locations:
                    locations[location] = []
                locations[location].append(soldier['full_name'])
            
            for location, soldiers in locations.items():
                soldiers = sorted(soldiers)
                text += f"üìç {location}:\n"
                for soldier in soldiers:
                    text += f"  ‚Ä¢ {soldier}\n"
                text += "\n"
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("admin_panel"))
    
    async def show_personnel_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º"""
        keyboard = get_personnel_management_keyboard()
        text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_journal_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–æ–º"""
        keyboard = get_journal_management_keyboard()
        text = "üìñ –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_settings_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                query, is_main_admin: bool):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = get_settings_keyboard(is_main_admin)
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_danger_zone(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É"""
        keyboard = get_danger_zone_keyboard()
        text = "‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞\n\nüö® –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_notifications_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        keyboard = get_notifications_settings_keyboard()
        text = "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_general_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        settings = self.db.get_user_settings(user_id)
        lang = settings.get('language', 'ru')
        tz = settings.get('timezone', 'Europe/Moscow')
        tf = settings.get('timeformat', '24h')
        text = (
            f"‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            f"üåê –Ø–∑—ã–∫: {lang}\n"
            f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz}\n"
            f"‚è≥ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {tf}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        from keyboards import get_general_settings_keyboard
        await query.edit_message_text(text, reply_markup=get_general_settings_keyboard())
    
    async def mark_all_arrived(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–∏–±—ã–≤—à–∏–º–∏"""
        keyboard = get_confirm_keyboard("mark_all_arrived")
        text = "üö® –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–∏–±—ã–≤—à–∏–º–∏?\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ—Ç–∏—Ç –≤—Å–µ—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –±–æ–π—Ü–æ–≤ –∫–∞–∫ –ø—Ä–∏–±—ã–≤—à–∏—Ö –≤ —á–∞—Å—Ç—å.\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def clear_all_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        keyboard = get_confirm_keyboard("clear_all_data")
        text = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?\n\nüö® –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ:\n‚Ä¢ –í—Å–µ –∑–∞–ø–∏—Å–∏ –æ –≤—ã—Ö–æ–¥–µ/–ø—Ä–∏—Ö–æ–¥–µ\n‚Ä¢ –í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)\n‚Ä¢ –í—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ)\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def reset_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        keyboard = get_confirm_keyboard("reset_settings")
        text = "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def enable_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!\n\n‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏—è—Ö."
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("settings_notifications"))
    
    async def disable_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        text = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!\n\n‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("settings_notifications"))
    
    async def set_notification_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        text = "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\nüîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("settings_notifications"))
    
    async def set_notification_recipients(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        text = "üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\nüîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("settings_notifications"))
    
    async def toggle_silent_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã"""
        text = "üîá –†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω!\n\nüîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –±–µ–∑ –∑–≤—É–∫–∞."
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("settings_notifications"))
    
    async def edit_soldier_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û –±–æ–π—Ü–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–æ–π—Ü–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        soldiers, _, _ = self.db.get_users_list(page=1, per_page=10000)
        if not soldiers:
            await query.edit_message_text("–ù–µ—Ç –±–æ–π—Ü–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=get_back_keyboard("admin_personnel"))
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –±–æ–π—Ü–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [InlineKeyboardButton(f"{s['full_name']}", callback_data=f"editname_{s['id']}")]
            for s in soldiers
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_personnel")])
        await query.edit_message_text(
            "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–π—Ü–∞ –¥–ª—è —Å–º–µ–Ω—ã –§–ò–û:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def add_new_soldier(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞"""
        user_id = update.effective_user.id
        self.user_states[user_id] = {"state": "waiting_for_new_soldier_name"}
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò.–û.\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.",
            reply_markup=get_back_keyboard("admin_personnel")
        )

    async def remove_soldier(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ–π—Ü–∞"""
        text = "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –±–æ–π—Ü–∞\n\nüîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("admin_personnel"))
    
    async def export_journal_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞"""
        try:
            filename = self.db.export_to_excel(30)
            if filename:
                with open(filename, 'rb') as file:
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=file,
                        caption="üì• –≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
                    )
                await query.edit_message_text(
                    "‚úÖ –ñ—É—Ä–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!",
                    reply_markup=get_back_keyboard("admin_journal")
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                    reply_markup=get_back_keyboard("admin_journal")
                )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}",
                reply_markup=get_back_keyboard("admin_journal")
            )
    
    async def show_journal_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂—É—Ä–Ω–∞–ª–∞"""
        stats = self.db.get_statistics(30)
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
        text += f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}\n"
        text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n\n"
        
        text += "üìä –ü–æ –¥–µ–π—Å—Ç–≤–∏—è–º:\n"
        for action, count in stats['action_stats'].items():
            emoji = "üö∂" if action == "—É–±—ã–ª" else "üè†"
            text += f"{emoji} {action}: {count}\n"
        
        text += "\nüèÜ –¢–æ–ø –ª–æ–∫–∞—Ü–∏–π:\n"
        for i, (location, count) in enumerate(list(stats['location_stats'].items())[:5], 1):
            text += f"{i}. {location}: {count}\n"
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("admin_journal"))
    
    async def show_journal_records(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∂—É—Ä–Ω–∞–ª–∞"""
        records = self.db.get_all_records(7)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        
        if not records:
            text = "üìã –ó–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = "üìã –ó–∞–ø–∏—Å–∏ –∂—É—Ä–Ω–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n\n"
            for record in records[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                formatted_time = timestamp.strftime('%d.%m.%Y %H:%M')
                action_emoji = "üö∂" if record['action'] == "—É–±—ã–ª" else "üè†"
                text += f"üë§ {record['full_name']}\n"
                text += f"{action_emoji} {record['action']} - {record['location']}\n"
                text += f"‚è∞ {formatted_time}\n\n"
            
            if len(records) > 10:
                text += f"... –∏ –µ—â–µ {len(records) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("admin_journal"))
    
    async def handle_admin_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 query, data: str, is_main_admin: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π - –£—Ä–æ–≤–µ–Ω—å 1"""
        if data == "admin_panel":
            await self.show_admin_panel(update, context, query, is_main_admin)
        elif data == "admin_summary":
            await self.show_admin_summary(update, context, query)
        elif data == "admin_personnel":
            await self.show_personnel_management(update, context, query)
        elif data == "admin_journal":
            await self.show_journal_management(update, context, query)
        elif data == "admin_settings":
            await self.show_settings_panel(update, context, query, is_main_admin)
        elif data == "admin_manage" and is_main_admin:
            await self.show_admin_management(update, context, query)
        elif data == "admin_add" and is_main_admin:
            await self.add_admin(update, context, query)
        elif data == "admin_remove" and is_main_admin:
            await self.remove_admin(update, context, query)
        else:
            await query.edit_message_text(
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_back_keyboard("admin_panel")
            )
    
    async def handle_personnel_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     query, data: str, is_main_admin: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ª–∏—á–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º"""
        if data == "personnel_edit_name":
            await self.edit_soldier_name(update, context, query)
        elif data == "personnel_add":
            await self.add_new_soldier(update, context, query)
        elif data == "personnel_remove":
            await self.remove_soldier(update, context, query)
        else:
            await query.edit_message_text(
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_back_keyboard("admin_personnel")
            )
    
    async def handle_journal_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   query, data: str, is_main_admin: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∂—É—Ä–Ω–∞–ª–æ–º"""
        if data == "journal_export":
            await self.export_journal_data(update, context, query)
        elif data == "journal_stats":
            await self.show_journal_statistics(update, context, query)
        elif data == "journal_records":
            await self.show_journal_records(update, context, query)
        else:
            await query.edit_message_text(
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_back_keyboard("admin_journal")
            )
    
    async def handle_settings_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    query, data: str, is_main_admin: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if data == "settings_notifications":
            await self.show_notifications_settings(update, context, query)
        elif data == "settings_general":
            await self.show_general_settings(update, context, query)
        elif data == "settings_danger_zone" and is_main_admin:
            await self.show_danger_zone(update, context, query)
        else:
            await query.edit_message_text(
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_back_keyboard("admin_settings")
            )
    
    async def handle_danger_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  query, data: str, is_main_admin: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        if data == "danger_mark_all_arrived":
            await self.mark_all_arrived(update, context, query)
        elif data == "danger_clear_all_data":
            await self.clear_all_data(update, context, query)
        elif data == "danger_reset_settings":
            await self.reset_settings(update, context, query)
        else:
            await query.edit_message_text(
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_back_keyboard("settings_danger_zone")
            )
    
    async def handle_notification_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                        query, data: str, is_main_admin: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if data == "notif_enable":
            await self.enable_notifications(update, context, query)
        elif data == "notif_disable":
            await self.disable_notifications(update, context, query)
        elif data == "notif_time":
            await self.set_notification_time(update, context, query)
        elif data == "notif_recipients":
            await self.set_notification_recipients(update, context, query)
        elif data == "notif_silent":
            await self.toggle_silent_mode(update, context, query)
        else:
            await query.edit_message_text(
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_back_keyboard("settings_notifications")
            )
    
    async def show_admin_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        stats = self.db.get_statistics(30)
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
        text += f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}\n"
        text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n\n"
        
        text += "üìä –ü–æ –¥–µ–π—Å—Ç–≤–∏—è–º:\n"
        for action, count in stats['action_stats'].items():
            emoji = "üö∂" if action == "—É–±—ã–ª" else "üè†"
            text += f"{emoji} {action}: {count}\n"
        
        text += "\nüèÜ –¢–æ–ø –ª–æ–∫–∞—Ü–∏–π:\n"
        for i, (location, count) in enumerate(list(stats['location_stats'].items())[:5], 1):
            text += f"{i}. {location}: {count}\n"
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("admin_panel"))
    
    async def show_admin_records(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        records = self.db.get_all_records(7)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        
        if not records:
            text = "üìã –ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = "üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n\n"
            for record in records[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                formatted_time = timestamp.strftime('%d.%m.%Y %H:%M')
                action_emoji = "üö∂" if record['action'] == "—É–±—ã–ª" else "üè†"
                text += f"üë§ {record['full_name']}\n"
                text += f"{action_emoji} {record['action']} - {record['location']}\n"
                text += f"‚è∞ {formatted_time}\n\n"
            
            if len(records) > 10:
                text += f"... –∏ –µ—â–µ {len(records) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("admin_panel"))
    
    async def export_admin_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            filename = self.db.export_to_excel(30)
            if filename:
                with open(filename, 'rb') as file:
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=file,
                        caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
                    )
                await query.edit_message_text(
                    "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!",
                    reply_markup=get_back_keyboard("admin_panel")
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                    reply_markup=get_back_keyboard("admin_panel")
                )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}",
                reply_markup=get_back_keyboard("admin_panel")
            )
    
    async def show_admin_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"""
        keyboard = get_admin_management_keyboard()
        text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        text = ("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:\n"
                "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É /start\n"
                "2. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ Telegram ID\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        
        user_id = update.effective_user.id
        self.user_states[user_id] = {'state': 'waiting_for_admin_id'}
        
        await query.edit_message_text(text, reply_markup=get_back_keyboard("admin_manage"))
    
    async def remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        admins = self.db.get_all_admins()
        
        if not admins:
            text = "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            await query.edit_message_text(text, reply_markup=get_back_keyboard("admin_manage"))
            return
        
        text = "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        keyboard = []
        
        for admin in admins:
            if admin['id'] != MAIN_ADMIN_ID:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå {admin['full_name']} (@{admin['username']})",
                        callback_data=f"remove_admin_{admin['id']}"
                    )
                ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_manage")])
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def handle_admin_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        admin_id_text = update.message.text.strip()
        
        try:
            admin_id = int(admin_id_text)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!\n"
                "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        target_user = self.db.get_user_by_id(admin_id)
        if not target_user:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–æ–º
        if self.db.is_admin(admin_id):
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user['full_name']} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
            )
            del self.user_states[user_id]
            is_admin = self.db.is_admin(user_id)
            await self.show_main_menu(update, context, is_admin)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        if self.db.add_admin(admin_id):
            del self.user_states[user_id]
            await update.message.reply_text(
                f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {target_user['full_name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            await context.bot.send_message(
                admin_id,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è."
            )
            
            is_admin = self.db.is_admin(user_id)
            await self.show_main_menu(update, context, is_admin)
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def handle_remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
        admin_id = int(data.split("_")[2])
        admin = self.db.get_user_by_id(admin_id)
        
        if not admin:
            await query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_back_keyboard("admin_manage")
            )
            return
        
        keyboard = get_confirm_keyboard("remove_admin", str(admin_id))
        text = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüë§ {admin['full_name']}\n@{admin['username']}\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        parts = data.split("_", 2)
        action = parts[1]
        target_id = parts[2] if len(parts) > 2 else ""
        
        if action == "remove_admin":
            admin_id = int(target_id)
            admin = self.db.get_user_by_id(admin_id)
            
            if self.db.remove_admin(admin_id):
                await query.edit_message_text(
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin['full_name']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                    reply_markup=get_back_keyboard("admin_manage")
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
                await context.bot.send_message(
                    admin_id,
                    "‚ÑπÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã."
                )
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=get_back_keyboard("admin_manage")
                )
        elif action == "mark_all_arrived":
            updated_count = self.db.mark_all_arrived()
            await query.edit_message_text(
                f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\nüéØ –û—Ç–º–µ—á–µ–Ω–æ –ø—Ä–∏–±—ã–≤—à–∏–º–∏: {updated_count} –±–æ–π—Ü–æ–≤",
                reply_markup=get_back_keyboard("settings_danger_zone")
            )
        
        elif action == "clear_all_data":
            if self.db.clear_all_data():
                await query.edit_message_text(
                    "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!\n\nüóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.",
                    reply_markup=get_back_keyboard("settings_danger_zone")
                )
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=get_back_keyboard("settings_danger_zone")
                )
        
        elif action == "reset_settings":
            await query.edit_message_text(
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!",
                reply_markup=get_back_keyboard("settings_danger_zone")
            )
        
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                reply_markup=get_back_keyboard("admin_panel")
            )