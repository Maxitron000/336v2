
import asyncio
import logging
import os
import sqlite3
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from handlers import user, admin, stats, notifications
from services.db_service import DatabaseService
from config import BOT_TOKEN, MAIN_ADMIN_ID, DB_NAME
from datetime import datetime
import sys

# –¶–≤–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_colored(message, color=Colors.ENDC):
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"{color}{message}{Colors.ENDC}")

def print_header():
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print_colored("=" * 60, Colors.HEADER)
    print_colored("ü§ñ –í–û–ï–ù–ù–´–ô –¢–ê–ë–ï–õ–¨ - –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–°–ö–ê", Colors.HEADER + Colors.BOLD)
    print_colored("=" * 60, Colors.HEADER)
    print_colored(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}", Colors.OKCYAN)
    print_colored("=" * 60, Colors.HEADER)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_colored("\nüîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:", Colors.OKBLUE + Colors.BOLD)
    
    checks = [
        ("BOT_TOKEN", BOT_TOKEN, "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"),
        ("MAIN_ADMIN_ID", MAIN_ADMIN_ID, "ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    ]
    
    all_ok = True
    for var_name, var_value, description in checks:
        if var_value and str(var_value) != "0":
            print_colored(f"  ‚úÖ {description}: OK", Colors.OKGREEN)
        else:
            print_colored(f"  ‚ùå {description}: –ù–ï –ù–ê–ô–î–ï–ù–û", Colors.FAIL)
            all_ok = False
    
    return all_ok

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_colored("\nüíæ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:", Colors.OKBLUE + Colors.BOLD)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
        if os.path.exists(DB_NAME):
            print_colored(f"  ‚úÖ –§–∞–π–ª –ë–î –Ω–∞–π–¥–µ–Ω: {DB_NAME}", Colors.OKGREEN)
        else:
            print_colored(f"  ‚ö†Ô∏è  –§–∞–π–ª –ë–î –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω: {DB_NAME}", Colors.WARNING)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = DatabaseService()
        print_colored("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK", Colors.OKGREEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            
            required_tables = ['users', 'records', 'admins']
            existing_tables = [table[0] for table in tables]
            
            for table in required_tables:
                if table in existing_tables:
                    print_colored(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table}': OK", Colors.OKGREEN)
                else:
                    print_colored(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ '{table}': –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞", Colors.WARNING)
        
        return True
        
    except Exception as e:
        print_colored(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}", Colors.FAIL)
        return False

def check_handlers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print_colored("\nüéØ –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:", Colors.OKBLUE + Colors.BOLD)
    
    handlers_list = [
        ("user", user.router, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã"),
        ("admin", admin.router, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
        ("stats", stats.router, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"),
        ("notifications", notifications.router, "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    ]
    
    all_ok = True
    for handler_name, handler_router, description in handlers_list:
        try:
            if handler_router:
                print_colored(f"  ‚úÖ {description}: OK", Colors.OKGREEN)
            else:
                print_colored(f"  ‚ùå {description}: –ù–ï –ó–ê–ì–†–£–ñ–ï–ù", Colors.FAIL)
                all_ok = False
        except Exception as e:
            print_colored(f"  ‚ùå {description}: –û–®–ò–ë–ö–ê - {str(e)}", Colors.FAIL)
            all_ok = False
    
    return all_ok

def check_bot_connection(bot_token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
    print_colored("\nüì± –ü–†–û–í–ï–†–ö–ê TELEGRAM API:", Colors.OKBLUE + Colors.BOLD)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        temp_bot = Bot(token=bot_token)
        print_colored("  ‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: –í–ê–õ–ò–î–ù–´–ô", Colors.OKGREEN)
        return True
    except Exception as e:
        print_colored(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {str(e)}", Colors.FAIL)
        return False

def print_system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    print_colored("\nüíª –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:", Colors.OKBLUE + Colors.BOLD)
    print_colored(f"  üêç Python: {sys.version.split()[0]}", Colors.OKCYAN)
    print_colored(f"  üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}", Colors.OKCYAN)
    print_colored(f"  üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}", Colors.OKCYAN)

def print_startup_summary(all_systems_ok):
    """–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–ø—É—Å–∫–∞"""
    print_colored("\n" + "=" * 60, Colors.HEADER)
    
    if all_systems_ok:
        print_colored("üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï! üéâ", Colors.OKGREEN + Colors.BOLD)
        print_colored("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...", Colors.OKGREEN)
    else:
        print_colored("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!", Colors.WARNING + Colors.BOLD)
        print_colored("üîß –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å –æ—à–∏–±–∫–∞–º–∏...", Colors.WARNING)
    
    print_colored("=" * 60, Colors.HEADER)

async def test_bot_functionality(bot):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    print_colored("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ë–û–¢–ê:", Colors.OKBLUE + Colors.BOLD)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        print_colored(f"  ‚úÖ –ò–º—è –±–æ—Ç–∞: @{bot_info.username}", Colors.OKGREEN)
        print_colored(f"  ‚úÖ ID –±–æ—Ç–∞: {bot_info.id}", Colors.OKGREEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        print_colored("  ‚úÖ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: OK", Colors.OKGREEN)
        
        return True
    except Exception as e:
        print_colored(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", Colors.FAIL)
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.WARNING  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
    )
    
    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
    env_ok = check_environment()
    db_ok = check_database()
    handlers_ok = check_handlers()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    print_system_info()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –º—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    all_systems_ok = env_ok and db_ok and handlers_ok
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print_startup_summary(all_systems_ok)
    
    if not env_ok:
        print_colored("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!", Colors.FAIL + Colors.BOLD)
        print_colored("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ BOT_TOKEN –∏ MAIN_ADMIN_ID –∑–∞–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ", Colors.WARNING)
        return

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=BOT_TOKEN)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        bot_connection_ok = await test_bot_connection(BOT_TOKEN)
        if not bot_connection_ok:
            print_colored("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API!", Colors.FAIL + Colors.BOLD)
            return

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        print_colored("\nüîó –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:", Colors.OKBLUE + Colors.BOLD)
        dp.include_router(user.router)
        print_colored("  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", Colors.OKGREEN)
        
        dp.include_router(admin.router)
        print_colored("  ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", Colors.OKGREEN)
        
        dp.include_router(stats.router)
        print_colored("  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", Colors.OKGREEN)
        
        dp.include_router(notifications.router)
        print_colored("  ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", Colors.OKGREEN)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print_colored("\n‚è∞ –ù–ê–°–¢–†–û–ô–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:", Colors.OKBLUE + Colors.BOLD)
        try:
            notifications.setup_scheduler(bot)
            print_colored("  ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω", Colors.OKGREEN)
        except Exception as e:
            print_colored(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}", Colors.WARNING)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        await test_bot_functionality(bot)

        # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
        print_colored("\n" + "üéâ" * 20, Colors.OKGREEN)
        print_colored("ü§ñ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!", Colors.OKGREEN + Colors.BOLD)
        print_colored("üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º", Colors.OKGREEN)
        print_colored("üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω ID: " + str(MAIN_ADMIN_ID), Colors.OKCYAN)
        print_colored("üéâ" * 20, Colors.OKGREEN)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print_colored("\nüì° –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...", Colors.OKCYAN)
        await dp.start_polling(bot)

    except Exception as e:
        print_colored(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: {e}", Colors.FAIL + Colors.BOLD)
        print_colored("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", Colors.WARNING)

if __name__ == '__main__':
    asyncio.run(main())
