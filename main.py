import asyncio
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from config import BOT_TOKEN
from handlers import Handlers
from database import Database
from telegram import Update
import time
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def cleanup_old_records():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"""
    db = Database()
    while True:
        try:
            deleted_count = db.cleanup_old_records(6)  # 6 –º–µ—Å—è—Ü–µ–≤
            if deleted_count > 0:
                logger.info(f"–û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–ø–∏—Å–µ–π: {e}")
            await asyncio.sleep(3600)  # 1 —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def send_reminders(application):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    from database import Database
    db = Database()
    while True:
        now = datetime.now()
        # –°–ª–µ–¥—É—é—â–µ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –≤ 18:40
        next_1840 = now.replace(hour=18, minute=40, second=0, microsecond=0)
        if now >= next_1840:
            next_1840 += timedelta(days=1)
        # –°–ª–µ–¥—É—é—â–µ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –≤ 19:00
        next_1900 = now.replace(hour=19, minute=0, second=0, microsecond=0)
        if now >= next_1900:
            next_1900 += timedelta(days=1)
        # –ñ–¥—ë–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        sleep_seconds = min((next_1840 - now).total_seconds(), (next_1900 - now).total_seconds())
        await asyncio.sleep(sleep_seconds)
        now = datetime.now()
        if now.hour == 18 and now.minute == 40:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–π—Ü–∞–º
            soldiers = db.get_soldiers_by_status('–≤–Ω–µ_—á–∞—Å—Ç–∏')
            for user in soldiers:
                try:
                    await application.bot.send_message(
                        user['id'],
                        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥ –≤ —á–∞—Å—Ç—å."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–π—Ü—É {user['id']}: {e}")
        if now.hour == 19 and now.minute == 0:
            # –°–≤–æ–¥–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            admins = db.get_all_admins()
            all_soldiers, _, _ = db.get_users_list(page=1, per_page=10000)
            from datetime import datetime
            out_list = []
            in_list = []
            for user in all_soldiers:
                location = user['last_location'] or "-"
                try:
                    time_str = datetime.fromisoformat(user['last_status_change']).strftime('%H:%M') if user['last_status_change'] else "--:--"
                except Exception:
                    time_str = "--:--"
                line = f"{user['full_name']} ‚Äî {location} ({time_str})"
                if user['status'] == '–≤–Ω–µ_—á–∞—Å—Ç–∏':
                    out_list.append(line)
                else:
                    in_list.append(line)
            summary = "üìã –°–≤–æ–¥–∫–∞ –ø–æ –±–æ–π—Ü–∞–º –Ω–∞ 19:00:\n\n"
            summary += "üö∂ –í–ù–ï –ß–ê–°–¢–ò:\n" + ("\n".join(out_list) if out_list else "‚Äî") + "\n\n"
            summary += "üè† –í –ß–ê–°–¢–ò:\n" + ("\n".join(in_list) if in_list else "‚Äî")
            for admin in admins:
                try:
                    await application.bot.send_message(
                        admin['id'],
                        summary
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω—É {admin['id']}: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = Handlers()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", handlers.start_command))
    application.add_handler(CallbackQueryHandler(handlers.handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(cleanup_old_records())
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(send_reminders(application))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    asyncio.run(main())