import asyncio
import logging
import os
import sqlite3
import signal
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from handlers import user, admin, stats, notifications
from services.db_service import DatabaseService
from config import BOT_TOKEN, MAIN_ADMIN_ID, DB_NAME
from datetime import datetime
import sys

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
try:
    from monitoring import monitor, advanced_logger, periodic_health_check
    MONITORING_AVAILABLE = True
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    MONITORING_AVAILABLE = False
    print(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

# –¶–≤–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_colored(message, color=Colors.ENDC):
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"{color}{message}{Colors.ENDC}")

def print_header():
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print_colored("=" * 60, Colors.HEADER)
    print_colored("ü§ñ –í–û–ï–ù–ù–´–ô –¢–ê–ë–ï–õ–¨ - –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–°–ö–ê", Colors.HEADER + Colors.BOLD)
    print_colored("=" * 60, Colors.HEADER)
    print_colored(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}", Colors.OKCYAN)
    print_colored("=" * 60, Colors.HEADER)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_colored("\nüîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:", Colors.OKBLUE + Colors.BOLD)

    checks = [
        ("BOT_TOKEN", BOT_TOKEN, "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"),
        ("MAIN_ADMIN_ID", MAIN_ADMIN_ID, "ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    ]

    all_ok = True
    for var_name, var_value, description in checks:
        if var_value and str(var_value) != "0":
            print_colored(f"  ‚úÖ {description}: OK", Colors.OKGREEN)
        else:
            print_colored(f"  ‚ùå {description}: –ù–ï –ù–ê–ô–î–ï–ù–û", Colors.FAIL)
            all_ok = False

    return all_ok

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_colored("\nüíæ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:", Colors.OKBLUE + Colors.BOLD)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
        if os.path.exists(DB_NAME):
            print_colored(f"  ‚úÖ –§–∞–π–ª –ë–î –Ω–∞–π–¥–µ–Ω: {DB_NAME}", Colors.OKGREEN)
        else:
            print_colored(f"  ‚ö†Ô∏è  –§–∞–π–ª –ë–î –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω: {DB_NAME}", Colors.WARNING)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = DatabaseService()
        print_colored("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK", Colors.OKGREEN)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()

            required_tables = ['users', 'records', 'admins']
            existing_tables = [table[0] for table in tables]

            for table in required_tables:
                if table in existing_tables:
                    print_colored(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table}': OK", Colors.OKGREEN)
                else:
                    print_colored(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ '{table}': –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞", Colors.WARNING)

        return True

    except Exception as e:
        print_colored(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}", Colors.FAIL)
        return False

def check_handlers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print_colored("\nüéØ –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:", Colors.OKBLUE + Colors.BOLD)

    handlers_list = [
        ("user", user.router, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã"),
        ("admin", admin.router, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
        ("stats", stats.router, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"),
        ("notifications", notifications.router, "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    ]

    all_ok = True
    for handler_name, handler_router, description in handlers_list:
        try:
            if handler_router:
                print_colored(f"  ‚úÖ {description}: OK", Colors.OKGREEN)
            else:
                print_colored(f"  ‚ùå {description}: –ù–ï –ó–ê–ì–†–£–ñ–ï–ù", Colors.FAIL)
                all_ok = False
        except Exception as e:
            print_colored(f"  ‚ùå {description}: –û–®–ò–ë–ö–ê - {str(e)}", Colors.FAIL)
            all_ok = False

    return all_ok



def print_system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    print_colored("\nüíª –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:", Colors.OKBLUE + Colors.BOLD)
    print_colored(f"  üêç Python: {sys.version.split()[0]}", Colors.OKCYAN)
    print_colored(f"  üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}", Colors.OKCYAN)
    print_colored(f"  üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}", Colors.OKCYAN)

def print_startup_summary(all_systems_ok):
    """–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–ø—É—Å–∫–∞"""
    print_colored("\n" + "=" * 60, Colors.HEADER)

    if all_systems_ok:
        print_colored("üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï! üéâ", Colors.OKGREEN + Colors.BOLD)
        print_colored("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...", Colors.OKGREEN)
    else:
        print_colored("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!", Colors.WARNING + Colors.BOLD)
        print_colored("üîß –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å –æ—à–∏–±–∫–∞–º–∏...", Colors.WARNING)

    print_colored("=" * 60, Colors.HEADER)

async def test_bot_functionality(bot):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    print_colored("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ë–û–¢–ê:", Colors.OKBLUE + Colors.BOLD)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        print_colored(f"  ‚úÖ –ò–º—è –±–æ—Ç–∞: @{bot_info.username}", Colors.OKGREEN)
        print_colored(f"  ‚úÖ ID –±–æ—Ç–∞: {bot_info.id}", Colors.OKGREEN)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        print_colored("  ‚úÖ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: OK", Colors.OKGREEN)

        return True
    except Exception as e:
        print_colored(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", Colors.FAIL)
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
shutdown_event = asyncio.Event()
bot_instance = None
dp_instance = None

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print_colored(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}. –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...", Colors.WARNING)
    shutdown_event.set()

async def graceful_shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        print_colored("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...", Colors.WARNING)
        if hasattr(notifications, 'scheduler') and notifications.scheduler.running:
            notifications.scheduler.shutdown()

        print_colored("üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º...", Colors.WARNING)
        if bot_instance:
            await bot_instance.session.close()

        print_colored("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", Colors.OKGREEN)
    except Exception as e:
        print_colored(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}", Colors.WARNING)

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('logs'):
        os.makedirs('logs')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Å–æ–ª–∏
    logging.basicConfig(
        level=logging.ERROR,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
        handlers=[
            logging.FileHandler('logs/bot.log', encoding='utf-8'),
        ]
    )
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('aiogram').setLevel(logging.ERROR)
    logging.getLogger('httpx').setLevel(logging.ERROR)
    logging.getLogger('apscheduler').setLevel(logging.ERROR)
    logging.getLogger('root').setLevel(logging.ERROR)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    setup_logging()

    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    print("\n" + "‚ïî" + "‚ïê" * 58 + "‚ïó")
    print("‚ïë" + " " * 58 + "‚ïë")
    print("‚ïë" + "üéñÔ∏è  –í–û–ï–ù–ù–´–ô –¢–ê–ë–ï–õ–¨ - –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–°–ö–ê  üéñÔ∏è".center(58) + "‚ïë")
    print("‚ïë" + " " * 58 + "‚ïë")
    print("‚ïë" + f"‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}".center(58) + "‚ïë")
    print("‚ïë" + " " * 58 + "‚ïë")
    print("‚ïö" + "‚ïê" * 58 + "‚ïù")
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    print("  üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    if not BOT_TOKEN:
        print("  ‚ùå –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    print("  ‚úÖ –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: OK")

    if not MAIN_ADMIN_ID:
        print("  ‚ùå ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    print("  ‚úÖ ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: OK")
    print("  üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("üíæ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    db_path = os.path.join(os.getcwd(), DB_NAME)
    if os.path.exists(db_path):
        print(f"  ‚úÖ –§–∞–π–ª –ë–î –Ω–∞–π–¥–µ–Ω: {DB_NAME}")
    else:
        print(f"  ‚ö†Ô∏è –§–∞–π–ª –ë–î –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω: {DB_NAME}")

    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è INFO —Å–æ–æ–±—â–µ–Ω–∏–π
        logging.getLogger("root").setLevel(logging.WARNING)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        db = DatabaseService()
        print("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK")
        print("  ‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: OK")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    print("üéØ –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:")
    print("  ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: OK")
    print()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    print("üíª –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:")
    print(f"  üêç Python: {sys.version.split()[0]}")
    print(f"  üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"  üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}")
    print()

    print("=" * 60)
    print("üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï! üéâ")
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("=" * 60)
    print()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API:")
    try:
        bot_info = await bot.get_me()
        print(f"  ‚úÖ –ë–æ—Ç: @{bot_info.username} (ID: {bot_info.id})")
        print("  ‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return
    print()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤  
    print("üîó –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:")
    try:
        dp.include_router(user.router)
        dp.include_router(admin.router)
        dp.include_router(stats.router)
        dp.include_router(notifications.router)
        print("  ‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return
    print()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    print("‚è∞ –ù–ê–°–¢–†–û–ô–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:")
    try:
        notifications.setup_scheduler(bot)
        print("  ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        print("  ‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    print()

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if MONITORING_AVAILABLE:
        print("üñ•Ô∏è –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
        try:
            asyncio.create_task(periodic_health_check())
            print("  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        print()

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
    print("üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê:")
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
        cleaned_count = db.cleanup_old_records(days=90)
        print(f"  ‚úÖ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {cleaned_count}")

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î
        db.optimize_database()
        print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
    print()

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("‚ïî" + "‚ïê" * 58 + "‚ïó")
    print("‚ïë" + " " * 58 + "‚ïë")
    print("‚ïë" + "üéâ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï! üéâ".center(58) + "‚ïë")
    print("‚ïë" + " " * 58 + "‚ïë")
    print("‚ïë" + f"üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω: {MAIN_ADMIN_ID}".center(58) + "‚ïë")
    print("‚ïë" + f"ü§ñ –ë–æ—Ç: @{bot_info.username}".center(58) + "‚ïë")
    print("‚ïë" + "üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É".center(58) + "‚ïë")
    print("‚ïë" + " " * 58 + "‚ïë")
    print("‚ïë" + "üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C".center(58) + "‚ïë")
    print("‚ïë" + " " * 58 + "‚ïë")
    print("‚ïö" + "‚ïê" * 58 + "‚ïù")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
    print("  üü¢ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("  üì° –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print()

    # Graceful shutdown
    async def on_shutdown():
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await bot.session.close()
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {signum}")
        asyncio.create_task(on_shutdown())
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    max_retries = 3
    retry_count = 0

    while retry_count < max_retries:
        try:
            retry_count += 1
            logging.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries})")
            await dp.start_polling(bot, skip_updates=True)
            break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            if retry_count < max_retries:
                wait_time = retry_count * 3
                logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
            else:
                logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
                break

    await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)