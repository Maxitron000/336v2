
import asyncio
import logging
import sys
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand
from handlers import user, admin, stats, notifications
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import BOT_TOKEN
from services.db_service import DBService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤"""
    
    # ANSI —Ü–≤–µ—Ç–∞
    COLORS = {
        'DEBUG': '\033[36m',    # –ì–æ–ª—É–±–æ–π
        'INFO': '\033[32m',     # –ó–µ–ª–µ–Ω—ã–π
        'WARNING': '\033[33m',  # –ñ–µ–ª—Ç—ã–π
        'ERROR': '\033[31m',    # –ö—Ä–∞—Å–Ω—ã–π
        'CRITICAL': '\033[35m', # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    }
    RESET = '\033[0m'
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∞
        color = self.COLORS.get(record.levelname, self.RESET)
        record.levelname = f"{color}{record.levelname}{self.RESET}"
        return super().format(record)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
formatter = ColoredFormatter(
    '%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    datefmt='%H:%M:%S'
)
console_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.addHandler(console_handler)

# –û—Ç–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ aiogram
logging.getLogger('aiogram').setLevel(logging.WARNING)

def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –∑–∞–ø—É—Å–∫–∞"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                  ‚ïë
‚ïë    üéñÔ∏è  –≠–õ–ï–ö–¢–†–û–ù–ù–´–ô –¢–ê–ë–ï–õ–¨ –í–´–•–û–î–ê –í –ì–û–†–û–î  üéñÔ∏è                     ‚ïë
‚ïë                                                                  ‚ïë
‚ïë    üìç 336 –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–º–∞—Å–∫–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–∞—Ç–∞–ª—å–æ–Ω                       ‚ïë
‚ïë    ü§ñ Telegram Bot v2.0                                          ‚ïë
‚ïë    ‚ö° Powered by aiogram 3.x                                     ‚ïë
‚ïë                                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        import aiosqlite
        from config import DB_NAME
        
        async with aiosqlite.connect(DB_NAME) as db:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT,
                    full_name TEXT NOT NULL,
                    is_admin BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS records (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    action TEXT NOT NULL,
                    location TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    comment TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (id)
                )
            ''')
            
            await db.commit()
            logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await db.execute("SELECT COUNT(*) FROM users")
            user_count = (await cursor.fetchone())[0]
            logging.info(f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

async def on_startup(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        BotCommand(command="profile", description="–ü—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
        BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="export", description="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞")
    ]
    await bot.set_my_commands(commands)

async def main():
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not BOT_TOKEN:
        logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logging.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    logging.info("üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher(storage=MemoryStorage())
        
        logging.info("ü§ñ –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_database()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
        logging.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        dp.include_router(user.router)
        dp.include_router(admin.router)
        dp.include_router(stats.router)
        dp.include_router(notifications.router)
        logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        logging.info("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        scheduler = AsyncIOScheduler()
        from handlers.notifications import setup_scheduler
        setup_scheduler(bot)
        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
        await on_startup(bot)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logging.info("üì± –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è polling –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        print("=" * 70)
        print(f"üü¢ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê | {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print("=" * 70)
        
        # –ó–∞–ø—É—Å–∫ polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n" + "=" * 70)
        print("üî¥ –ü–û–õ–£–ß–ï–ù –°–ò–ì–ù–ê–õ –û–°–¢–ê–ù–û–í–ö–ò")
        print("‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("=" * 70)
    except Exception as e:
        logging.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("\n" + "=" * 70)
        print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê")
        print(f"üí• {e}")
        print("=" * 70)
