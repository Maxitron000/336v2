
import asyncio
import logging
from datetime import datetime
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from services.db_service import DatabaseService
from config import BOT_TOKEN, MAIN_ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class BotHandler:
    def __init__(self, db_service):
        self.db = db_service
        self.user_states = {}

    async def start(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        username = user.username or f"user_{user_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = self.db.get_user(user_id)
        
        if not existing_user:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
            self.user_states[user_id] = {'state': 'waiting_for_name'}
            await update.message.reply_text(
                "üéñÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è!\n\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–§–∞–º–∏–ª–∏—è –ò.–û.\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò."
            )
            return
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await self.show_main_menu(update, context)

    async def handle_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        if user_id in self.user_states:
            state = self.user_states[user_id].get('state')
            
            if state == 'waiting_for_name':
                await self.handle_name_input(update, context, text)
            elif state == 'waiting_for_custom_location':
                await self.handle_custom_location(update, context, text)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )

    async def handle_name_input(self, update, context, full_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
        import re
        user = update.effective_user
        user_id = user.id
        username = user.username or f"user_{user_id}"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û
        if not re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$', full_name):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û!\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò.–û.\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.db.add_user(user_id, username, full_name):
            del self.user_states[user_id]
            await update.message.reply_text(
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!"
            )
            await self.show_main_menu(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def handle_custom_location(self, update, context, location):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if len(location) < 3 or len(location) > 50:
            await update.message.reply_text(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        state_data = self.user_states[user_id]
        action = state_data['action']
        
        if self.db.add_record(user_id, action, location):
            del self.user_states[user_id]
            
            action_text = "—É–±—ã–ª" if action == "—É–±—ã–ª" else "–ø—Ä–∏–±—ã–ª"
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"–î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n"
                f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            await self.show_main_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")

    async def handle_callback(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        if data.startswith("action_"):
            await self.handle_action_selection(update, context, query, data)
        elif data.startswith("location_"):
            await self.handle_location_selection(update, context, query, data)
        elif data == "show_journal":
            await self.show_journal(update, context, query)
        elif data == "main_menu":
            await self.show_main_menu(update, context, query)

    async def handle_action_selection(self, update, context, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        action = "—É–±—ã–ª" if "leave" in data else "–ø—Ä–∏–±—ã–ª"
        
        locations = [
            "üè• –ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞", "‚öì –û–ë–†–ú–ü", "üåÜ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", 
            "üõí –ú–∞–≥–∞–∑–∏–Ω", "üç≤ –°—Ç–æ–ª–æ–≤–∞—è", "üè® –ì–æ—Å–ø–∏—Ç–∞–ª—å",
            "‚öôÔ∏è –†–∞–±–æ—á–∫–∞", "ü©∫ –í–í–ö", "üèõÔ∏è –ú–§–¶", "üöì –ü–∞—Ç—Ä—É–ª—å"
        ]
        
        keyboard = []
        for i in range(0, len(locations), 2):
            row = []
            for j in range(i, min(i+2, len(locations))):
                location = locations[j]
                row.append(InlineKeyboardButton(
                    location, 
                    callback_data=f"location_{action}_{location}"
                ))
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–æ–µ"
        keyboard.append([InlineKeyboardButton(
            "üìù –î—Ä—É–≥–æ–µ", 
            callback_data=f"location_{action}_custom"
        )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        action_text = "—É–±—ã–ª–∏" if action == "—É–±—ã–ª" else "–ø—Ä–∏–±—ã–ª–∏"
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ —Ç–æ–º, —á—Ç–æ –≤—ã {action_text}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_location_selection(self, update, context, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        parts = data.split("_", 2)
        action = parts[1]
        location = parts[2]
        
        user_id = update.effective_user.id
        
        if location == "custom":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
            self.user_states[user_id] = {
                'state': 'waiting_for_custom_location',
                'action': action
            }
            
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –î–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä\n"
                "‚Ä¢ –ö–∞—Ñ–µ\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if self.db.add_record(user_id, action, location):
            action_text = "—É–±—ã–ª" if action == "—É–±—ã–ª" else "–ø—Ä–∏–±—ã–ª"
            await query.edit_message_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"–î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n"
                f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)
            await self.show_main_menu(update, context, query)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")

    async def show_main_menu(self, update, context, query=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton("üö∂ –£–±—ã–ª", callback_data="action_leave"),
                InlineKeyboardButton("üè† –ü—Ä–∏–±—ã–ª", callback_data="action_arrive")
            ],
            [InlineKeyboardButton("üìã –ú–æ–π –∂—É—Ä–Ω–∞–ª", callback_data="show_journal")]
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        user_id = update.effective_user.id
        if self.db.is_admin(user_id) or user_id == MAIN_ADMIN_ID:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        text = "üéñÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å –≤—ã—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if query:
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def show_journal(self, update, context, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        from datetime import datetime
        
        user_id = update.effective_user.id
        records = self.db.get_user_records(user_id, 5)
        
        if not records:
            text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª –ø—É—Å—Ç.\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
        else:
            text = "üìã –í–∞—à –∂—É—Ä–Ω–∞–ª (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π):\n\n"
            for record in records:
                timestamp = datetime.fromisoformat(record['timestamp'].replace('Z', '+00:00'))
                formatted_time = timestamp.strftime('%d.%m %H:%M')
                action_emoji = "üö∂" if record['action'] == "—É–±—ã–ª" else "üè†"
                text += f"{action_emoji} {record['action']} - {record['location']}\n"
                text += f"‚è∞ {formatted_time}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = DatabaseService()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()

        # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        await application.bot.delete_my_commands()
        await application.bot.set_my_commands([])

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–∞
        bot_handler = BotHandler(db)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
        application.add_handler(CommandHandler("start", bot_handler.start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.handle_message))
        application.add_handler(CallbackQueryHandler(bot_handler.handle_callback))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
        await application.run_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
